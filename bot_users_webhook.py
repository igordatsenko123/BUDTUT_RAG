import os
import json
import subprocess
import pandas as pd
from datetime import datetime
import asyncio
from db import SessionLocal
from sqlalchemy import select
from models import User
import re
from crud import insert_or_update_user





# --- Telegram ---
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, MessageHandler, filters, ContextTypes,
    CommandHandler, ConversationHandler, ApplicationBuilder, ExtBot
)
from telegram.constants import ParseMode
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler
from telegram import WebAppInfo

# --- OpenAI ---
from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY
from openai import OpenAI

# --- FastAPI & Uvicorn ---
import uvicorn
from fastapi import FastAPI, Request, HTTPException, Response, status
from contextlib import asynccontextmanager

# === –ö–ª—ñ—î–Ω—Ç–∏ —Ç–∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É TELEGRAM_BOT_TOKEN!")
if not OPENAI_API_KEY:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É OPENAI_API_KEY!")

WEBHOOK_URL_BASE = os.environ.get("WEBHOOK_URL_BASE")
#WEBHOOK_URL_BASE="https://2b8e-176-37-33-23.ngrok-free.app"
if not WEBHOOK_URL_BASE:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ WEBHOOK_URL_BASE!")

WEBHOOK_PATH = f"/telegram/{TELEGRAM_BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_URL_BASE}{WEBHOOK_PATH}"

client = OpenAI(api_key=OPENAI_API_KEY)


LOG_FILE = "chat_history.csv"

NAME, SURNAME, PHONE, SPECIALTY, EXPERIENCE, COMPANY = range(6)

menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üìö –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫—É—Ä—Å", web_app=WebAppInfo(url="https://igordatsenko123.github.io/TG_WEB_APP_AISAFETYCOACH/?v=4"))]
    ],
    resize_keyboard=True
)

print("DEBUG: –Ü–º–ø–æ—Ä—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ")
print(f"DEBUG: Webhook URL –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {WEBHOOK_URL}")

# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
def log_message(user_id, username, msg_id, msg_type, role, content):
    print(f"DEBUG: –õ–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {username} ({user_id}) - {role}: {content}")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_entry = {
        "user_id": user_id,
        "username": username,
        "datetime": timestamp,
        "message_id": msg_id,
        "message_type": msg_type,
        "role": role,
        "content": content
    }
    try:
        if os.path.exists(LOG_FILE):
            df = pd.read_csv(LOG_FILE)
            df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)
        else:
            df = pd.DataFrame([new_entry])
        df.to_csv(LOG_FILE, index=False)
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ: {e}")

async def handle_user_question_with_thinking(update: Update, context: ContextTypes.DEFAULT_TYPE, get_answer_func):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–°—Ç–µ–ø–∞–Ω–∏—á –¥—É–º–∞—î...",
    –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥.
    """
    question = update.message.text

    async def send_thinking_message():
        await asyncio.sleep(5)
        if not response_event.is_set():
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–°—Ç–µ–ø–∞–Ω–∏—á –¥—É–º–∞—î...",
                parse_mode=ParseMode.HTML
            )

    async def get_answer_and_respond():
        try:
            answer = get_answer_func(question)
            await update.message.reply_text(answer, parse_mode=ParseMode.HTML)
        except Exception as e:
            await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
        finally:
            response_event.set()

    response_event = asyncio.Event()
    await asyncio.gather(
        send_thinking_message(),
        get_answer_and_respond()
    )

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ===
async def is_registered(user_id: int) -> bool:
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar_one_or_none()
        return user is not None

# === –ê–Ω–∫–µ—Ç–∞ —Ç–∞ –û–±—Ä–æ–±–Ω–∏–∫–∏ (–í–∞—à –∫–æ–¥ –±–µ–∑ –∑–º—ñ–Ω) ===
# –¢—É—Ç –π–¥—É—Ç—å –≤–∞—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: start, get_name, get_surname, get_phone,
# get_specialty, cancel, show_profile, update_profile, handle_message, handle_voice
# –í–∞–∂–ª–∏–≤–æ: –í–æ–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –î–û —Ç–æ–≥–æ, —è–∫ –≤–æ–Ω–∏ –¥–æ–¥–∞—é—Ç—å—Å—è —è–∫ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –≤ lifespan
# (–ö–æ–¥ —Ñ—É–Ω–∫—Ü—ñ–π –∑ –≤–∞—à–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—é–¥–∏)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={user_id}")

    if await is_registered(user_id):
        try:
            async with SessionLocal() as session:
                result = await session.execute(select(User).where(User.tg_id == user_id))
                user = result.scalar_one_or_none()

                if user and user.first_name:
                    await update.message.reply_text(
                        f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user.first_name}!\n–ì–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:",
                        reply_markup=menu_keyboard
                    )
                    return ConversationHandler.END
                else:
                    raise ValueError("–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑ –≤–∞—à–∏–º –ø—Ä–æ—Ñ—ñ–ª–µ–º. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–≤–Ω–∏–º–æ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?"
            )
            return NAME
    else:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—è. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
        return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {update.message.text}")
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–ü—Ä–∏–∑–≤—ñ—â–µ?")
    return SURNAME

async def get_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["surname"] = update.message.text

    contact_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_text(
        "–î—è–∫—É—é. –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤—Ä—É—á–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "`+380 (XX) XXX XX XX`",
        reply_markup=contact_keyboard,
        parse_mode=ParseMode.MARKDOWN
    )
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_phone = update.message.text.strip()
    print(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω (—Ç–µ–∫—Å—Ç–æ–º): {raw_phone}")

    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏, –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
    digits_only = re.sub(r"\D", "", raw_phone)

    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä:
    if digits_only.startswith("0") and len(digits_only) == 10:
        normalized = "+380" + digits_only[1:]
    elif digits_only.startswith("380") and len(digits_only) == 12:
        normalized = "+" + digits_only
    elif digits_only.startswith("67") or digits_only.startswith("68") or digits_only.startswith("50") or digits_only.startswith("63"):
        # –ë–µ–∑ –∫–æ–¥—É –∫—Ä–∞—ó–Ω–∏ ‚Äî –≤–≤–∞–∂–∞—î–º–æ –≤–∞–ª—ñ–¥–Ω–∏–º
        normalized = "+380" + digits_only
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É.\n"
            "–ü—Ä–∏–∫–ª–∞–¥ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É: `+380 (67) 123 45 67`, `0671234567`, –∞–±–æ `67 123 45 67`",
            parse_mode=ParseMode.MARKDOWN
        )
        return PHONE

    context.user_data["phone"] = normalized
    print(f"DEBUG: –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä: {normalized}")

    await update.message.reply_text(
        "–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å?",
        reply_markup=ReplyKeyboardRemove()
    )
    return await ask_specialty(update, context)




async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user_id = update.effective_user.id

    # –í–∞–∂–ª–∏–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –°–í–û–á–ú –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    if contact.user_id != user_id:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –≤–ª–∞—Å–Ω–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            # –ú–æ–∂–Ω–∞ –∑–Ω–æ–≤—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø–∏—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        )
        # –ó–∞–ª–∏—à–∞—î–º–æ—Å—è –≤ —Ç–æ–º—É –∂ —Å—Ç–∞–Ω—ñ, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É –∞–±–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—è
        return PHONE

    phone_number = contact.phone_number
    print(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É): {phone_number} –≤—ñ–¥ user_id={user_id}")
    context.user_data["phone"] = phone_number

    await update.message.reply_text(
        f"–î—è–∫—É—é, –≤–∞—à –Ω–æ–º–µ—Ä {phone_number} –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å?",
        reply_markup=ReplyKeyboardRemove()  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º"
    )
    return await ask_specialty(update, context)

async def ask_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–≤–∞—Ä—é–≤–∞–ª—å–Ω–∏–∫", callback_data="spec:–ó–≤–∞—Ä—é–≤–∞–ª—å–Ω–∏–∫")],
        [InlineKeyboardButton("–ú–æ–Ω—Ç–∞–∂–Ω–∏–∫", callback_data="spec:–ú–æ–Ω—Ç–∞–∂–Ω–∏–∫")],
        [InlineKeyboardButton("–°–ª—é—Å–∞—Ä", callback_data="spec:–°–ª—é—Å–∞—Ä")],
        [InlineKeyboardButton("–ß–µ—Ä–µ–∑–∑–∞–±–æ—Ä–Ω–æ–≥—É–ø–µ—Ä–∫–∏–¥–∞—Ç–æ—Ä", callback_data="spec:–ß–µ—Ä–µ–∑–∑–∞–±–æ—Ä–Ω–æ–≥—É–ø–µ—Ä–∫–∏–¥–∞—Ç–æ—Ä")],
        [InlineKeyboardButton("–†–æ–∑–¥–æ–ª–±–∞–π", callback_data="spec:–†–æ–∑–¥–æ–ª–±–∞–π")],
        [InlineKeyboardButton("–Ü–Ω—à–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å", callback_data="spec:other")]
    ])

    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:",
        reply_markup=keyboard
    )
    return SPECIALTY

async def handle_specialty_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("spec:"):
        specialty = data.replace("spec:", "")
        if specialty == "other":
            await query.edit_message_text("‚úèÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—Ä—É—á–Ω—É –≤–∞—à—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:")
            return SPECIALTY  # –ñ–¥–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            context.user_data["specialty"] = specialty
            await query.edit_message_text(f"‚úÖ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {specialty}")
            return await ask_experience(update, context)

async def handle_manual_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty = update.message.text.strip()
    context.user_data["specialty"] = specialty
    await update.message.reply_text(f"‚úÖ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {specialty}")
    return await ask_experience(update, context)


async def ask_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("0‚Äì2 —Ä–æ–∫–∏", callback_data="exp:0-2"),
         InlineKeyboardButton("3‚Äì5 —Ä–æ–∫—ñ–≤", callback_data="exp:3-5")],
        [InlineKeyboardButton("6‚Äì10 —Ä–æ–∫—ñ–≤", callback_data="exp:6-10"),
         InlineKeyboardButton("11+ —Ä–æ–∫—ñ–≤", callback_data="exp:11+")],
    ])

    chat = update.effective_chat
    await context.bot.send_message(
        chat_id=chat.id,
        text="–°–∫—ñ–ª—å–∫–∏ —É –≤–∞—Å –¥–æ—Å–≤—ñ–¥—É —Ä–æ–±–æ—Ç–∏?",
        reply_markup=keyboard
    )
    return EXPERIENCE



async def handle_experience_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data.startswith("exp:"):
        experience = data.split(":")[1]
        context.user_data["experience"] = experience

        await query.edit_message_text(f"‚úÖ –î–æ—Å–≤—ñ–¥: {experience} —Ä–æ–∫—ñ–≤")
        await query.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó, –≤ —è–∫—ñ–π –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ (–∞–±–æ –ø—Ä–∞—Ü—é–≤–∞–ª–∏):")
        return COMPANY



async def get_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["company"] = update.message.text
    tg_id = update.effective_user.id
    user_obj = update.effective_user
    try:
        await insert_or_update_user(
            tg_id=tg_id,
            first_name=context.user_data.get("name"),
            last_name=context.user_data.get("surname"),
            phone=context.user_data.get("phone"),
            speciality=context.user_data.get("specialty"),
            experience=context.user_data.get("experience"),
            company=context.user_data.get("company"),
            username=user_obj.username,
            updated_at=datetime.utcnow()
        )
        await update.message.reply_text("–î—è–∫—É—é! –ê–Ω–∫–µ—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üòä", reply_markup=menu_keyboard)
        print(f"DEBUG: –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è tg_id={tg_id}")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–Ω–∫–µ—Ç—É –≤ –±–∞–∑—É –¥–ª—è {tg_id}: {e}")
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–Ω–∫–µ—Ç–∏.")

    context.user_data.clear()
    return ConversationHandler.END

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id

    try:
        async with SessionLocal() as session:
            result = await session.execute(select(User).where(User.tg_id == tg_id))
            user = result.scalar_one_or_none()

            if user is None:
                await update.message.reply_text("–¢–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏ /start.")
                return ConversationHandler.END

            profile_text = (
                f"üë§ <b>–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:</b>\n"
                f"<b>–Ü–º'—è:</b> {user.first_name or 'N/A'}\n"
                f"<b>–ü—Ä–∏–∑–≤—ñ—â–µ:</b> {user.last_name or 'N/A'}\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone or 'N/A'}\n"
                f"<b>–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:</b> {user.speciality or 'N/A'}\n"
                f"<b>–î–æ—Å–≤—ñ–¥:</b> {user.experience or 'N/A'}\n"
                f"<b>–ö–æ–º–ø–∞–Ω—ñ—è:</b> {user.company or 'N/A'}"
            )

            await update.message.reply_text(profile_text, parse_mode=ParseMode.HTML)

    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è {tg_id}: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.")




async def update_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_registered(user_id):
        await update.message.reply_text("–¢–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏ /start.")
        return ConversationHandler.END

    print("DEBUG: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
    await update.message.reply_text("–û–Ω–æ–≤–∏–º–æ –∞–Ω–∫–µ—Ç—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    return NAME


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–ê–Ω–∫–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    print("üöÄ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", update.message.text)
    user_id = update.effective_user.id
    text = update.message.text

    if text == "üìã –ü—Ä–æ—Ñ—ñ–ª—å":
        return await show_profile(update, context)

    if not await is_registered(user_id):
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start.")
        return

    user = update.effective_user
    username = user.username or user.first_name
    log_message(user.id, username, update.message.message_id, "text", "question", text)

    try:
        from qa_engine import get_answer
        await handle_user_question_with_thinking(update, context, get_answer)
    except ImportError:
        print("ERROR: –ú–æ–¥—É–ª—å qa_engine –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –º—ñ–π –º–æ–¥—É–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ qa_engine: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.")


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print("DEBUG: –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    if not await is_registered(user_id):
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start.")
        return

    voice = update.message.voice
    user = update.message.from_user
    username = user.username or user.first_name

    input_ogg = f"voice_{user_id}.ogg"
    output_wav = f"voice_{user_id}.wav"

    try:
        file = await context.bot.get_file(voice.file_id)
        await file.download_to_drive(input_ogg)
        print(f"DEBUG: Voice file downloaded to {input_ogg}")

        print("DEBUG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–µ—Ä–µ–∑ ffmpeg")
        process = subprocess.run(
            ["ffmpeg", "-y", "-i", input_ogg, "-acodec", "pcm_s16le", "-ar", "16000", output_wav],
            capture_output=True, text=True, check=True
        )
        print("DEBUG: ffmpeg stdout:", process.stdout)
        print("DEBUG: ffmpeg stderr:", process.stderr)
        print(f"DEBUG: Converted file saved to {output_wav}")

        with open(output_wav, "rb") as f:
            print("DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Whisper API")
            response = client.audio.transcriptions.create(model="whisper-1", file=f)
        recognized_text = response.text
        print(f"DEBUG: –†–æ—Å–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {recognized_text}")

        log_message(user.id, username, update.message.message_id, "voice", "question", recognized_text)

        from qa_engine import get_answer
        await handle_user_question_with_thinking(update, context, get_answer)
    except FileNotFoundError:
        print("ERROR: ffmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∞ —î –≤ PATH.")
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: ffmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except subprocess.CalledProcessError as e:
        print(f"ERROR: ffmpeg failed: {e}")
        print(f"ERROR: ffmpeg stdout: {e.stdout}")
        print(f"ERROR: ffmpeg stderr: {e.stderr}")
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó).")
    except ImportError:
        print("ERROR: –ú–æ–¥—É–ª—å qa_engine –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –º—ñ–π –º–æ–¥—É–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É.")
    finally:
        for fpath in [input_ogg, output_wav]:
            if os.path.exists(fpath):
                try:
                    os.remove(fpath)
                    print(f"DEBUG: Removed temp file {fpath}")
                except OSError as e:
                    print(f"ERROR: Could not remove temp file {fpath}: {e}")


# --- Lifespan –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞ ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üîÅ Lifespan –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram App...")
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.state.telegram_app = application

    # --- –í–ò–î–ê–õ–Ü–¢–¨ –¶–Ü –†–Ø–î–ö–ò –Ü–ú–ü–û–†–¢–£ ---
    # from main_handlers import start, get_name, get_surname, get_phone, get_specialty, cancel
    # from main_handlers import show_profile, update_profile, handle_message, handle_voice
    # --- –ö–Ü–ù–ï–¶–¨ –í–ò–î–ê–õ–ï–ù–ù–Ø ---

    # –û—Å–∫—ñ–ª—å–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—ó start, get_name —ñ —Ç.–¥. –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –≤ —Ü—å–æ–º—É –∂ —Ñ–∞–π–ª—ñ,
    # –≤–æ–Ω–∏ –≤–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—É—Ç –∑–∞ —Å–≤–æ—ó–º–∏ —ñ–º–µ–Ω–∞–º–∏.

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start), # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'start' –Ω–∞–ø—Ä—è–º—É
            CommandHandler("update_profile", update_profile),
            MessageHandler(filters.Regex('^‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É$'), update_profile), # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'update_profile' –Ω–∞–ø—Ä—è–º—É
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_surname)],
            # --- –û–ù–û–í–õ–ï–ù–û –°–¢–ê–ù PHONE ---
            PHONE: [
                MessageHandler(filters.CONTACT, process_contact_info), # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)  # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞
            ],
            # --- –ö–Ü–ù–ï–¶–¨ –û–ù–û–í–õ–ï–ù–ù–Ø ---
            SPECIALTY: [CallbackQueryHandler(handle_specialty_selection, pattern="^spec:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_specialty)],
            EXPERIENCE: [CallbackQueryHandler(handle_experience_selection, pattern="^exp:")],
            COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_company)],
        },
        fallbacks=[CommandHandler("cancel", cancel)], # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'cancel' –Ω–∞–ø—Ä—è–º—É
        per_message=False
    )
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex('^üìã –ü—Ä–æ—Ñ—ñ–ª—å$'), show_profile)) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'show_profile' –Ω–∞–ø—Ä—è–º—É
    application.add_handler(CommandHandler("profile", show_profile)) # –¢–µ —Å–∞–º–µ
    application.add_handler(MessageHandler(filters.VOICE, handle_voice)) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'handle_voice' –Ω–∞–ø—Ä—è–º—É
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'handle_message' –Ω–∞–ø—Ä—è–º—É
    application.add_handler(CallbackQueryHandler(handle_experience_selection, pattern="^exp:"))
    application.add_handler(CallbackQueryHandler(handle_specialty_selection, pattern="^spec:"))

    await application.initialize()
    await application.start()
    try:
        print(f"DEBUG: –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook –Ω–∞ URL: {WEBHOOK_URL}")
        # !!! –ó–í–ï–†–ù–Ü–¢–¨ –£–í–ê–ì–£: –í–∏ —Ä–∞–Ω—ñ—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ WEBHOOK_SECRET_TOKEN.
        # –Ø–∫—â–æ –≤—ñ–Ω –ø–æ—Ç—Ä—ñ–±–µ–Ω, –π–æ–≥–æ —Å–ª—ñ–¥ –¥–æ–¥–∞—Ç–∏ —Å—é–¥–∏.
        await application.bot.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=Update.ALL_TYPES
            # secret_token=WEBHOOK_SECRET_TOKEN # –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ, —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω
        )
        print("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook: {e}")
    yield
    print("‚ùå Lifespan –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è: –∑—É–ø–∏–Ω—è—î–º–æ Telegram App...")
    await application.stop()
    try:
        print("DEBUG: –í–∏–¥–∞–ª—è—î–º–æ webhook...")
        if await application.bot.delete_webhook():
            print("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        else:
            print("WARN: Webhook –Ω–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: {e}")
    await application.shutdown()


# === FastAPI –î–æ–¥–∞—Ç–æ–∫ ===
fastapi_app = FastAPI(lifespan=lifespan)

@fastapi_app.post(WEBHOOK_PATH)
async def telegram_webhook_endpoint(request: Request):
    application = request.app.state.telegram_app
    try:
        data = await request.json()
        print("DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≤—ñ–¥ Telegram:", data)
    except json.JSONDecodeError:
        print("ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥ Telegram")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid JSON data")
    update = Update.de_json(data, application.bot)
    if not update:
        print("ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±'—î–∫—Ç Update –∑ –¥–∞–Ω–∏—Ö")
        return Response(status_code=status.HTTP_200_OK)
    print(f"DEBUG: –û–±—Ä–æ–±–ª—è—î–º–æ update_id: {update.update_id}")
    try:
        await application.process_update(update)
        print(f"DEBUG: –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ update_id: {update.update_id}")
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ update_id {update.update_id}: {e}")
        return Response(status_code=status.HTTP_200_OK)
    return Response(status_code=status.HTTP_200_OK)

@fastapi_app.get("/")
async def root():
    return {"message": "FastAPI server for Telegram Bot is running (Webhook Mode)"}

if __name__ == "__main__":
    print("DEBUG: –ó–∞–ø—É—Å–∫ FastAPI —á–µ—Ä–µ–∑ Uvicorn (Webhook Mode)")
    port = int(os.environ.get("PORT", 10000))
    uvicorn.run(fastapi_app, host="0.0.0.0", port=port)
