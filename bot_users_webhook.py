import os
import json
import subprocess
import pandas as pd
from datetime import datetime
import asyncio
from db import SessionLocal
from sqlalchemy import select
from models import User
import re
from crud import insert_or_update_user
import html

# --- Telegram ---
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, MessageHandler, filters, ContextTypes,
    CommandHandler, ConversationHandler, ApplicationBuilder, ExtBot
)
from telegram.constants import ParseMode
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler
from telegram import WebAppInfo

# --- OpenAI ---
from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY
from openai import OpenAI

# --- FastAPI & Uvicorn ---
import uvicorn
from fastapi import FastAPI, Request, HTTPException, Response, status
from contextlib import asynccontextmanager

# === –ö–ª—ñ—î–Ω—Ç–∏ —Ç–∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É TELEGRAM_BOT_TOKEN!")
if not OPENAI_API_KEY:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É OPENAI_API_KEY!")

WEBHOOK_URL_BASE = os.environ.get("WEBHOOK_URL_BASE")
#WEBHOOK_URL_BASE="https://2b8e-176-37-33-23.ngrok-free.app"
if not WEBHOOK_URL_BASE:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ WEBHOOK_URL_BASE!")

WEBHOOK_PATH = f"/telegram/{TELEGRAM_BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_URL_BASE}{WEBHOOK_PATH}"

client = OpenAI(api_key=OPENAI_API_KEY)


LOG_FILE = "chat_history.csv"

NAME, SURNAME, PHONE, SPECIALTY, EXPERIENCE = range(5)

menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üí™ –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫—É—Ä—Å", web_app=WebAppInfo(url="https://igordatsenko123.github.io/TG_WEB_APP_AISAFETYCOACH/?v=8"))]
    ],
    resize_keyboard=True
)

print("DEBUG: –Ü–º–ø–æ—Ä—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ")
print(f"DEBUG: Webhook URL –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {WEBHOOK_URL}")

# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
def log_message(user_id, username, msg_id, msg_type, role, content):
    print(f"DEBUG: –õ–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {username} ({user_id}) - {role}: {content}")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_entry = {
        "user_id": user_id,
        "username": username,
        "datetime": timestamp,
        "message_id": msg_id,
        "message_type": msg_type,
        "role": role,
        "content": content
    }
    try:
        if os.path.exists(LOG_FILE):
            df = pd.read_csv(LOG_FILE)
            df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)
        else:
            df = pd.DataFrame([new_entry])
        df.to_csv(LOG_FILE, index=False)
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ: {e}")



# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ===
async def is_registered(user_id: int) -> bool:
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar_one_or_none()
        return user is not None

# === –ê–Ω–∫–µ—Ç–∞ —Ç–∞ –û–±—Ä–æ–±–Ω–∏–∫–∏
from telegram import ReplyKeyboardRemove

async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–∏—à–∏ –Ω–∞–º —Ç—É—Ç:\nhttps://t.me/ai_safety_coach_support"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={user_id}")

    if await is_registered(user_id):
        try:
            async with SessionLocal() as session:
                result = await session.execute(select(User).where(User.tg_id == user_id))
                user = result.scalar_one_or_none()

                if user and user.first_name:
                    await update.message.reply_text(
                        f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, <b>{html.escape(user.first_name)}</b>!\n–ì–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:",
                        reply_markup=menu_keyboard,
                        parse_mode=ParseMode.HTML
                    )

                    return ConversationHandler.END
                else:
                    raise ValueError("–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑ –≤–∞—à–∏–º –ø—Ä–æ—Ñ—ñ–ª–µ–º. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–≤–Ω–∏–º–æ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?"
            )
            return NAME
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –±–µ–∑–ø–µ–∫–∏ –ø—Ä–∞—Ü—ñ ‚õëÔ∏è –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —ñ–∑ –±—É–¥—å-—è–∫–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º! –î–∞–≤–∞–π –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å üòä\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º º—è",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML
        )
        return NAME



async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()

    if name in ["üìã –ü—Ä–æ—Ñ—ñ–ª—å", "‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"] or len(name) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—î —ñ–º º—è.")
        return NAME

    context.user_data["name"] = name
    await update.message.reply_text("–û–∫–µ–π! –ê —Ç–µ–ø–µ—Ä –ø—Ä—ñ–∑–≤–∏—â–µ", reply_markup=ReplyKeyboardRemove())
    return SURNAME

async def get_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    surname = update.message.text.strip()

    if surname in ["üìã –ü—Ä–æ—Ñ—ñ–ª—å", "‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"] or len(surname) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—î –ø—Ä—ñ–∑–≤–∏—â–µ.")
        return SURNAME

    context.user_data["surname"] = surname

    contact_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    user_name = context.user_data.get("name", "–¥—Ä—É–∂–µ")
    await update.message.reply_text(
        f"–†–∞–¥–∏–π –∑–Ω–∞–π–æ–º—Å—Ç–≤—É, <b>{html.escape(user_name)}</b>! –î–∞–≤–∞–π –¥–∞–ª—ñ üí™",
        parse_mode=ParseMode.HTML
    )

    await update.message.reply_text(
        "–ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –π–æ–≥–æ.\n\n"
        "<i>–¢–≤–æ—ó –¥–∞–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–≤–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –Ω–∞–¥–∞—Ç–∏ —Ç–æ–±—ñ —Å–∞–º–µ —Ç–µ, —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ</i>",
        reply_markup=contact_keyboard,
        parse_mode=ParseMode.HTML
    )
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_phone = update.message.text.strip()
    print(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω (—Ç–µ–∫—Å—Ç–æ–º): {raw_phone}")

    digits_only = re.sub(r"\D", "", raw_phone)

    if digits_only.startswith("0") and len(digits_only) == 10:
        normalized = "+380" + digits_only[1:]
    elif digits_only.startswith("380") and len(digits_only) == 12:
        normalized = "+" + digits_only
    elif digits_only.startswith(("67", "68", "50", "63")):
        normalized = "+380" + digits_only
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É.</b>\n"
            "–ü—Ä–∏–∫–ª–∞–¥ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É: <code>+380671234567</code>, <code>0671234567</code>, –∞–±–æ <code>67 123 45 67</code>",
            parse_mode=ParseMode.HTML
        )
        return PHONE

    context.user_data["phone"] = normalized
    print(f"DEBUG: –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä: {normalized}")


    return await ask_specialty(update, context, remove_keyboard=True)


async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user_id = update.effective_user.id

    if contact.user_id != user_id:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –≤–ª–∞—Å–Ω–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.")
        return PHONE

    phone_number = contact.phone_number
    print(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É): {phone_number} –≤—ñ–¥ user_id={user_id}")

    digits_only = re.sub(r"\\D", "", phone_number)
    if digits_only.startswith("380") and len(digits_only) == 12:
        normalized = "+" + digits_only
    elif len(digits_only) == 10 and digits_only.startswith("0"):
        normalized = "+380" + digits_only[1:]
    elif len(digits_only) == 9:
        normalized = "+380" + digits_only
    else:
        print("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏:", digits_only)
        await update.message.reply_text(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥–∏ –π–æ–≥–æ –≤—Ä—É—á–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: <code>+380XXXXXXXXX</code>",
            parse_mode=ParseMode.HTML
        )
        return PHONE

    context.user_data["phone"] = normalized


    return await ask_specialty(update, context, remove_keyboard=True)

async def ask_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE, remove_keyboard=False):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–≤–∞—Ä—é–≤–∞–ª—å–Ω–∏–∫", callback_data="spec:–ó–≤–∞—Ä—é–≤–∞–ª—å–Ω–∏–∫")],
        [InlineKeyboardButton("–ú—É–ª—è—Ä", callback_data="spec:–ú—É–ª—è—Ä")],
        [InlineKeyboardButton("–ú–æ–Ω–æ–ª—ñ—Ç–Ω–∏–∫", callback_data="spec:–ú–æ–Ω–æ–ª—ñ—Ç–Ω–∏–∫")],
        [InlineKeyboardButton("–ê—Ä–º–∞—Ç—É—Ä–Ω–∏–∫", callback_data="spec:–ê—Ä–º–∞—Ç—É—Ä–Ω–∏–∫")],
        [InlineKeyboardButton("–Ü–Ω—à–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å", callback_data="spec:other")]
    ])

    await update.message.reply_text(
        "–î–æ–±—Ä–µ! –û–±–µ—Ä–∏ —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å",
        reply_markup=keyboard
    )
    return SPECIALTY

async def handle_specialty_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("spec:"):
        specialty = data.replace("spec:", "")
        if specialty == "other":
            await query.edit_message_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏ –≤—Ä—É—á–Ω—É —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:")
            return SPECIALTY
        else:
            context.user_data["specialty"] = specialty
            await query.edit_message_text(f"‚úÖ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: <b>{html.escape(specialty)}</b>", parse_mode=ParseMode.HTML)
            return await ask_experience(update, context)

async def handle_manual_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty = update.message.text.strip()

    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not specialty or len(specialty) < 2 or any(c in specialty for c in "!@#$%^&*(){}[]<>"):
        await update.message.reply_text(
            "‚ö†Ô∏è –í–≤–µ–¥ –∫–æ—Ä–µ–∫—Ç–Ω—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å (–Ω–µ –º–µ–Ω—à–µ 2 –ª—ñ—Ç–µ—Ä, –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤)."
        )
        return SPECIALTY

    if specialty in ["üìã –ü—Ä–æ—Ñ—ñ–ª—å", "‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"]:
        await update.message.reply_text(
            "‚ö†Ô∏è –¶–µ –≤–∏–≥–ª—è–¥–∞—î —è–∫ –∫–Ω–æ–ø–∫–∞. –í–≤–µ–¥–∏ —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –≤—Ä—É—á–Ω—É."
        )
        return SPECIALTY

    context.user_data["specialty"] = specialty
    await update.message.reply_text(
        f"‚úÖ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: <b>{html.escape(specialty)}</b>",
        parse_mode=ParseMode.HTML
    )
    return await ask_experience(update, context)


async def ask_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("<1 —Ä–æ–∫—É", callback_data="exp:<1"),
         InlineKeyboardButton("1‚Äì2 —Ä–æ–∫–∏", callback_data="exp:1-2")],
        [InlineKeyboardButton("3‚Äì5 —Ä–æ–∫—ñ–≤", callback_data="exp:3-5"),
         InlineKeyboardButton(">5 —Ä–æ–∫—ñ–≤", callback_data="exp:>5")],
    ])

    chat = update.effective_chat
    user_name = context.user_data.get("name", "–¥—Ä—É–∂–µ")
    await context.bot.send_message(
        chat_id=chat.id,
        text=f"–ß—É–¥–æ–≤–æ, <b>{html.escape(user_name)}</b>! –©–µ —Ç—Ä–æ—à–∫–∏! ü§ó\n–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ —Ç–∏ –ø—Ä–∞—Ü—é—î—à –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é?",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    return EXPERIENCE

async def handle_experience_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    valid_experiences = ["<1", "1-2", "3-5", ">5"]

    if data.startswith("exp:"):
        experience = data.split(":")[1]
        if experience not in valid_experiences:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–æ—Å–≤—ñ–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É.")
            return EXPERIENCE

        context.user_data["experience"] = experience
        await query.edit_message_text(f"‚úÖ –î–æ—Å–≤—ñ–¥: <b>{html.escape(experience)}</b> —Ä–æ–∫—ñ–≤", parse_mode=ParseMode.HTML)
        tg_id = update.effective_user.id
        user_obj = update.effective_user
        try:
            await insert_or_update_user(
                tg_id=tg_id,
                first_name=context.user_data.get("name"),
                last_name=context.user_data.get("surname"),
                phone=context.user_data.get("phone"),
                speciality=context.user_data.get("specialty"),
                experience=experience,
                username=user_obj.username,
                updated_at=datetime.utcnow()
            )

            await query.message.reply_text(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä –∑–∞–¥–∞–≤–∞–π –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –±–µ–∑–ø–µ–∫–∏ –ø—Ä–∞—Ü—ñ –∞–±–æ –ø—Ä–æ—Ö–æ–¥—å –∫—É—Ä—Å ‚Äú–ù–∞–≤—á–∞–Ω–Ω—è –∑ –û—Ö–æ—Ä–æ–Ω–∏ –ü—Ä–∞—Ü—ñ‚Äù ‚Äî –∫–Ω–æ–ø–∫–∞ –∑–Ω–∏–∑—É –µ–∫—Ä–∞–Ω–∞",
                parse_mode=ParseMode.HTML
            )
            await query.message.reply_text(
                "–Ø –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤ º—è–∑–∫—É ‚Äî —á–µ–∫–∞—é –Ω–∞ —Ç–≤–æ—ó –ø–∏—Ç–∞–Ω–Ω—è 24/7!",
                reply_markup=menu_keyboard
            )
            context.user_data.clear()
            return ConversationHandler.END
        except Exception as e:
            print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–Ω–∫–µ—Ç—É –≤ –±–∞–∑—É: {e}")
            await query.message.reply_text("‚ö†Ô∏è –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–Ω–∫–µ—Ç–∏.")
            return ConversationHandler.END




async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id

    try:
        async with SessionLocal() as session:
            result = await session.execute(select(User).where(User.tg_id == tg_id))
            user = result.scalar_one_or_none()

            if user is None:
                await update.message.reply_text("–¢–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏ /start.")
                return ConversationHandler.END

            profile_text = (
                f"üë§ <b>–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:</b>\n"
                f"<b>–Ü–º'—è:</b> {user.first_name or 'N/A'}\n"
                f"<b>–ü—Ä–∏–∑–≤—ñ—â–µ:</b> {user.last_name or 'N/A'}\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone or 'N/A'}\n"
                f"<b>–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:</b> {user.speciality or 'N/A'}\n"
                f"<b>–î–æ—Å–≤—ñ–¥:</b> {user.experience or 'N/A'}\n"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update.message.reply_text(
                text=profile_text,
                parse_mode=ParseMode.HTML,
                reply_markup=menu_keyboard  # ‚Üê –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–¥–µ—Å—å
            )

    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è {tg_id}: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.")

    return ConversationHandler.END


async def update_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_registered(user_id):
        await update.message.reply_text("–¢–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏ /start.")
        return ConversationHandler.END

    print("DEBUG: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
    await update.message.reply_text(f"–ü—Ä–∏–≤—ñ—Ç, {html.escape(name)}! –î–∞–≤–∞–π –æ–Ω–æ–≤–∏–º–æ –∞–Ω–∫–µ—Ç—É.")
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º º—è")
    return NAME


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–ê–Ω–∫–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

async def handle_user_question_with_thinking(update: Update, context: ContextTypes.DEFAULT_TYPE, get_answer_func):

    question = update.message.text

    try:
        answer = get_answer_func(question)
        await update.message.reply_text(answer, parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    print("üöÄ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", update.message.text)
    user_id = update.effective_user.id
    text = update.message.text

    if text == "üìã –ü—Ä–æ—Ñ—ñ–ª—å":
        return await show_profile(update, context)

    if not await is_registered(user_id):
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start.")
        return

    user = update.effective_user
    username = user.username or user.first_name
    log_message(user.id, username, update.message.message_id, "text", "question", text)

    try:
        from qa_engine import get_answer
        answer = get_answer(text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            text=answer,
            parse_mode=ParseMode.HTML,
            reply_markup=menu_keyboard  # ‚Üê —Å—Ä–∞–∑—É –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
        )

    except ImportError:
        print("ERROR: –ú–æ–¥—É–ª—å qa_engine –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –º—ñ–π –º–æ–¥—É–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ qa_engine: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.")




async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print("DEBUG: –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    if not await is_registered(user_id):
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start.")
        return

    voice = update.message.voice
    user = update.message.from_user
    username = user.username or user.first_name

    input_ogg = f"voice_{user_id}.ogg"
    output_wav = f"voice_{user_id}.wav"

    try:
        file = await context.bot.get_file(voice.file_id)
        await file.download_to_drive(input_ogg)
        print(f"DEBUG: Voice file downloaded to {input_ogg}")

        print("DEBUG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–µ—Ä–µ–∑ ffmpeg")
        process = subprocess.run(
            ["ffmpeg", "-y", "-i", input_ogg, "-acodec", "pcm_s16le", "-ar", "16000", output_wav],
            capture_output=True, text=True, check=True
        )
        print("DEBUG: ffmpeg stdout:", process.stdout)
        print("DEBUG: ffmpeg stderr:", process.stderr)
        print(f"DEBUG: Converted file saved to {output_wav}")

        with open(output_wav, "rb") as f:
            print("DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Whisper API")
            response = client.audio.transcriptions.create(model="whisper-1", file=f)
        recognized_text = response.text
        print(f"DEBUG: –†–æ—Å–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {recognized_text}")

        log_message(user.id, username, update.message.message_id, "voice", "question", recognized_text)

        from qa_engine import get_answer
        answer = get_answer(recognized_text)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            text=answer,
            parse_mode=ParseMode.HTML,
            reply_markup=menu_keyboard
        )

    except FileNotFoundError:
        print("ERROR: ffmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∞ —î –≤ PATH.")
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: ffmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except subprocess.CalledProcessError as e:
        print(f"ERROR: ffmpeg failed: {e}")
        print(f"ERROR: ffmpeg stdout: {e.stdout}")
        print(f"ERROR: ffmpeg stderr: {e.stderr}")
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó).")
    except ImportError:
        print("ERROR: –ú–æ–¥—É–ª—å qa_engine –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –º—ñ–π –º–æ–¥—É–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É.")
    finally:
        for fpath in [input_ogg, output_wav]:
            if os.path.exists(fpath):
                try:
                    os.remove(fpath)
                    print(f"DEBUG: Removed temp file {fpath}")
                except OSError as e:
                    print(f"ERROR: Could not remove temp file {fpath}: {e}")




from telegram import BotCommand

async def set_bot_commands(application):
    await application.bot.set_my_commands([
        BotCommand("support", "–ø–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—è"),
        BotCommand("profile", "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"),
        BotCommand("update_profile", "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"),
    ])

# --- Lifespan –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞ ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üîÅ Lifespan –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram App...")

    # 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram Application
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.state.telegram_app = application

    # 2. –•–µ–Ω–¥–ª–µ—Ä –∞–Ω–∫–µ—Ç–∏ (–ø–æ–µ—Ç–∞–ø–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è)
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("update_profile", update_profile),
            MessageHandler(filters.Regex('^‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É$'), update_profile),
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_surname)],
            PHONE: [
                MessageHandler(filters.CONTACT, process_contact_info),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)
            ],
            SPECIALTY: [
                CallbackQueryHandler(handle_specialty_selection, pattern="^spec:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_specialty)
            ],
            EXPERIENCE: [CallbackQueryHandler(handle_experience_selection, pattern="^exp:")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False
    )
    application.add_handler(conv_handler)

    # 3. –ö–æ–º–∞–Ω–¥–∏ / —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("support", support_command))
    application.add_handler(CommandHandler("profile", show_profile))
    application.add_handler(CommandHandler("update_profile", update_profile))

    # 4. –•–µ–Ω–¥–ª–µ—Ä–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
    application.add_handler(MessageHandler(filters.Regex('^üìã –ü—Ä–æ—Ñ—ñ–ª—å$'), show_profile))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # 5. Callback-—Ö–µ–Ω–¥–ª–µ—Ä–∏ (–¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∏–ø—É InlineKeyboard)
    application.add_handler(CallbackQueryHandler(handle_experience_selection, pattern="^exp:"))
    application.add_handler(CallbackQueryHandler(handle_specialty_selection, pattern="^spec:"))

    # 6. –ó–∞–ø—É—Å–∫
    await application.initialize()
    await set_bot_commands(application)
    await application.start()

    # 7. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
    try:
        print(f"DEBUG: –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook –Ω–∞ URL: {WEBHOOK_URL}")
        await application.bot.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=Update.ALL_TYPES
            # secret_token=WEBHOOK_SECRET_TOKEN
        )
        print("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook: {e}")

    yield

    # 8. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    print("‚ùå Lifespan –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è: –∑—É–ø–∏–Ω—è—î–º–æ Telegram App...")
    await application.stop()
    try:
        print("DEBUG: –í–∏–¥–∞–ª—è—î–º–æ webhook...")
        if await application.bot.delete_webhook():
            print("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        else:
            print("WARN: Webhook –Ω–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: {e}")
    await application.shutdown()


# === FastAPI –î–æ–¥–∞—Ç–æ–∫ ===
fastapi_app = FastAPI(lifespan=lifespan)

@fastapi_app.post(WEBHOOK_PATH)
async def telegram_webhook_endpoint(request: Request):
    application = request.app.state.telegram_app
    try:
        data = await request.json()
        print("DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≤—ñ–¥ Telegram:", data)
    except json.JSONDecodeError:
        print("ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥ Telegram")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid JSON data")
    update = Update.de_json(data, application.bot)
    if not update:
        print("ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±'—î–∫—Ç Update –∑ –¥–∞–Ω–∏—Ö")
        return Response(status_code=status.HTTP_200_OK)
    print(f"DEBUG: –û–±—Ä–æ–±–ª—è—î–º–æ update_id: {update.update_id}")
    try:
        await application.process_update(update)
        print(f"DEBUG: –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ update_id: {update.update_id}")
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ update_id {update.update_id}: {e}")
        return Response(status_code=status.HTTP_200_OK)
    return Response(status_code=status.HTTP_200_OK)

@fastapi_app.get("/")
async def root():
    return {"message": "FastAPI server for Telegram Bot is running (Webhook Mode)"}

if __name__ == "__main__":
    print("DEBUG: –ó–∞–ø—É—Å–∫ FastAPI —á–µ—Ä–µ–∑ Uvicorn (Webhook Mode)")
    port = int(os.environ.get("PORT", 10000))
    uvicorn.run(fastapi_app, host="0.0.0.0", port=port)
