import os
import json
import subprocess
import pandas as pd
from datetime import datetime
import asyncio
import secrets # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (—è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–∏–π)

# --- Telegram ---
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, MessageHandler, filters, ContextTypes,
    CommandHandler, ConversationHandler, ApplicationBuilder, ExtBot # –î–æ–¥–∞–Ω–æ ExtBot
)
from telegram.constants import ParseMode # –î–ª—è Markdown —É –ø—Ä–æ—Ñ—ñ–ª—ñ

# --- OpenAI ---
from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ü—ñ –∑–º—ñ–Ω–Ω—ñ —î –≤ config.py –∞–±–æ —è–∫ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
from openai import OpenAI

# --- FastAPI & Uvicorn ---
import uvicorn
from fastapi import FastAPI, Request, HTTPException, Response, status # –î–æ–¥–∞–Ω–æ Request, HTTPException, Response, status
from contextlib import asynccontextmanager

# === –ö–ª—ñ—î–Ω—Ç–∏ —Ç–∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É TELEGRAM_BOT_TOKEN!")
if not OPENAI_API_KEY:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É OPENAI_API_KEY!")

# –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ü—ñ –∑–º—ñ–Ω–Ω—ñ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
WEBHOOK_URL_BASE = os.environ.get("WEBHOOK_URL_BASE")
if not WEBHOOK_URL_BASE:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ WEBHOOK_URL_BASE (–Ω–∞–ø—Ä., https://your-app.onrender.com)!")
# –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å–µ–∫—Ä–µ—Ç, —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–∏–π (–∫—Ä–∞—â–µ –∑–∞–¥–∞–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ ENV)
WEBHOOK_SECRET_TOKEN = "my_token123"

# –ö–æ–Ω—Å—Ç—Ä—É—é—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–ª—è –≤–µ–±—Ö—É–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –≤ —à–ª—è—Ö—É - –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.
WEBHOOK_PATH = f"/telegram/{TELEGRAM_BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_URL_BASE}{WEBHOOK_PATH}"

client = OpenAI(api_key=OPENAI_API_KEY)

# === –§–∞–π–ª–∏ ===
USER_FILE = "user_info.json"
LOG_FILE = "chat_history.csv"

# === –°—Ç–∞–Ω–∏ –∞–Ω–∫–µ—Ç–∏ ===
NAME, SURNAME, PHONE, SPECIALTY = range(4)

# === –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ===
menu_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("üìã –ü—Ä–æ—Ñ—ñ–ª—å")], [KeyboardButton("‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É")]],
    resize_keyboard=True
)

print("DEBUG: –Ü–º–ø–æ—Ä—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ")
print(f"DEBUG: Webhook URL –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {WEBHOOK_URL}")
print(f"DEBUG: Webhook Secret Token: {'*' * 5}{WEBHOOK_SECRET_TOKEN[-5:]}") # –ù–µ –ª–æ–≥—É–π—Ç–µ –ø–æ–≤–Ω–∏–π —Ç–æ–∫–µ–Ω!

# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
def log_message(user_id, username, msg_id, msg_type, role, content):
    # –í–∞—à –∫–æ–¥ –ª–æ–≥—É–≤–∞–Ω–Ω—è –±–µ–∑ –∑–º—ñ–Ω
    print(f"DEBUG: –õ–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {username} ({user_id}) - {role}: {content}")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_entry = {
        "user_id": user_id,
        "username": username,
        "datetime": timestamp,
        "message_id": msg_id,
        "message_type": msg_type,
        "role": role,
        "content": content
    }
    try:
        if os.path.exists(LOG_FILE):
            df = pd.read_csv(LOG_FILE)
            df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)
        else:
            df = pd.DataFrame([new_entry])
        df.to_csv(LOG_FILE, index=False)
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ: {e}")

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ===
def is_registered(user_id):
    # –í–∞—à –∫–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –±–µ–∑ –∑–º—ñ–Ω
    print(f"DEBUG: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é user_id={user_id}")
    if not os.path.exists(USER_FILE):
        return False
    try:
        with open(USER_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        return str(user_id) in data
    except (FileNotFoundError, json.JSONDecodeError):
        return False


# === –ê–Ω–∫–µ—Ç–∞ —Ç–∞ –û–±—Ä–æ–±–Ω–∏–∫–∏ (–í–∞—à –∫–æ–¥ –±–µ–∑ –∑–º—ñ–Ω) ===
# –¢—É—Ç –π–¥—É—Ç—å –≤–∞—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: start, get_name, get_surname, get_phone,
# get_specialty, cancel, show_profile, update_profile, handle_message, handle_voice
# –í–∞–∂–ª–∏–≤–æ: –í–æ–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –î–û —Ç–æ–≥–æ, —è–∫ –≤–æ–Ω–∏ –¥–æ–¥–∞—é—Ç—å—Å—è —è–∫ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –≤ lifespan
# (–ö–æ–¥ —Ñ—É–Ω–∫—Ü—ñ–π –∑ –≤–∞—à–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—é–¥–∏)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={user_id}")
    if is_registered(user_id):
        try:
            with open(USER_FILE, "r", encoding="utf-8") as f:
                name = json.load(f)[str(user_id)]["name"]
            await update.message.reply_text(
                f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {name}!\n–ì–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:",
                reply_markup=menu_keyboard
            )
        except (FileNotFoundError, KeyError, json.JSONDecodeError) as e:
             print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_id}: {e}")
             # –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ, —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –∑–Ω–æ–≤—É
             await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑ –≤–∞—à–∏–º –ø—Ä–æ—Ñ—ñ–ª–µ–º. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–≤–Ω–∏–º–æ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
             return NAME
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—è. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
        return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {update.message.text}")
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–ü—Ä–∏–∑–≤—ñ—â–µ?")
    return SURNAME

async def get_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è: {update.message.text}")
    context.user_data["surname"] = update.message.text
    await update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω?")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {update.message.text}")
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å?")
    return SPECIALTY

async def get_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏")
    context.user_data["specialty"] = update.message.text
    user_id = str(update.effective_user.id)

    user_info = {
        "name": context.user_data["name"],
        "surname": context.user_data["surname"],
        "phone": context.user_data["phone"],
        "specialty": context.user_data["specialty"]
    }

    try:
        if os.path.exists(USER_FILE):
            with open(USER_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}

        data[user_id] = user_info
        with open(USER_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

        print(f"DEBUG: –ê–Ω–∫–µ—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –¥–ª—è user_id={user_id}")
        await update.message.reply_text("–î—è–∫—É—é, —Ç–µ–ø–µ—Ä –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üòä", reply_markup=menu_keyboard)
    except (IOError, json.JSONDecodeError) as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–Ω–∫–µ—Ç—É –¥–ª—è {user_id}: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–Ω–∫–µ—Ç–∏.")

    context.user_data.clear() # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG: –ê–Ω–∫–µ—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    context.user_data.clear() # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –≤—ñ–¥–º—ñ–Ω—ñ
    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.", reply_markup=menu_keyboard) # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é
    return ConversationHandler.END

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG: –ó–∞–ø–∏—Ç –ø—Ä–æ—Ñ—ñ–ª—é")
    user_id = str(update.effective_user.id)
    if not is_registered(user_id):
        await update.message.reply_text("–¢–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏ /start.")
        return ConversationHandler.END # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ, —â–æ–± –≤–∏–π—Ç–∏ –∑ –º–æ–∂–ª–∏–≤–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É

    try:
        with open(USER_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        user = data[user_id]
        profile_text = (
            f"üë§ *–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:*\n"
            f"–Ü–º'—è: {user.get('name', 'N/A')}\n"
            f"–ü—Ä–∏–∑–≤—ñ—â–µ: {user.get('surname', 'N/A')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', 'N/A')}\n"
            f"–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {user.get('specialty', 'N/A')}"
        )
        await update.message.reply_text(profile_text, parse_mode=ParseMode.MARKDOWN_V2) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    except (FileNotFoundError, KeyError, json.JSONDecodeError) as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è {user_id}: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å.")
    # –ù–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω, –±–æ —Ü–µ –Ω–µ —á–∞—Å—Ç–∏–Ω–∞ –¥—ñ–∞–ª–æ–≥—É –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏

async def update_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_registered(user_id):
         await update.message.reply_text("–¢–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏ /start.")
         return ConversationHandler.END # –í–∏—Ö–æ–¥–∏–º–æ, —è–∫—â–æ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π

    print("DEBUG: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
    await update.message.reply_text("–û–Ω–æ–≤–∏–º–æ –∞–Ω–∫–µ—Ç—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    return NAME # –ü–æ—á–∏–Ω–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¶–µ–π —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ù–ï —î –∫–æ–º–∞–Ω–¥–æ—é –Ü –ù–ï –æ–±—Ä–æ–±–ª–µ–Ω–∏–π ConversationHandler –∞–±–æ —ñ–Ω—à–∏–º–∏ MessageHandler (Regex)
    if not update.message or not update.message.text:
        return # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    print("üöÄ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", update.message.text)
    user_id = update.effective_user.id
    text = update.message.text

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (–¥—É–±–ª—é–≤–∞–Ω–Ω—è –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤, –º–æ–∂–Ω–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏, —è–∫—â–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ) ---
    # –¶–µ–π –±–ª–æ–∫ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º, —è–∫—â–æ Regex —Ö–µ–Ω–¥–ª–µ—Ä–∏ –ø—Ä–∞—Ü—é—é—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–æ
    if text == "üìã –ü—Ä–æ—Ñ—ñ–ª—å":
        return await show_profile(update, context)
    # –û–±—Ä–æ–±–∫–∞ "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É" —ñ–Ω—ñ—Ü—ñ—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ ConversationHandler, —Ç—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ---
    if not is_registered(user_id):
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start.")
        return # –ù–µ–º–∞—î —Å—Ç–∞–Ω—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è, –±–æ —Ü–µ –Ω–µ ConversationHandler

    # --- –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ QA Engine ---
    user = update.effective_user
    username = user.username or user.first_name # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è, —è–∫—â–æ –Ω–µ–º–∞—î username
    log_message(user.id, username, update.message.message_id, "text", "question", text)

    try:
        # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ qa_engine —ñ—Å–Ω—É—î —ñ —Ñ—É–Ω–∫—Ü—ñ—è get_answer —î
        from qa_engine import get_answer
        answer = get_answer(text) # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—î —ñ –ø—Ä–∞—Ü—é—î
        print("üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞:", answer)
        log_message(user.id, username, update.message.message_id, "text", "answer", answer)
        await update.message.reply_text(answer, parse_mode=ParseMode.HTML)
    except ImportError:
         print("ERROR: –ú–æ–¥—É–ª—å qa_engine –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
         await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –º—ñ–π –º–æ–¥—É–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ qa_engine: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.")


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∞—à –∫–æ–¥ handle_voice –±–µ–∑ –∑–º—ñ–Ω, –∞–ª–µ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ ffmpeg –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ Render
    user_id = update.effective_user.id
    print("DEBUG: –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    if not is_registered(user_id):
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start.")
        return

    voice = update.message.voice
    user = update.message.from_user
    username = user.username or user.first_name # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è, —è–∫—â–æ –Ω–µ–º–∞—î username

    input_ogg = f"voice_{user_id}.ogg" # –î–æ–¥–∞—î–º–æ user_id –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
    output_wav = f"voice_{user_id}.wav"

    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
        file = await context.bot.get_file(voice.file_id)
        await file.download_to_drive(input_ogg)
        print(f"DEBUG: Voice file downloaded to {input_ogg}")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —á–µ—Ä–µ–∑ ffmpeg
        print("DEBUG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–µ—Ä–µ–∑ ffmpeg")
        process = subprocess.run(
            ["ffmpeg", "-y", "-i", input_ogg, "-acodec", "pcm_s16le", "-ar", "16000", output_wav], # –î–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ Whisper
            capture_output=True, text=True, check=True
        )
        print("DEBUG: ffmpeg stdout:", process.stdout)
        print("DEBUG: ffmpeg stderr:", process.stderr)
        print(f"DEBUG: Converted file saved to {output_wav}")


        # –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ —á–µ—Ä–µ–∑ Whisper
        with open(output_wav, "rb") as f:
            print("DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Whisper API")
            response = client.audio.transcriptions.create(model="whisper-1", file=f)
        recognized_text = response.text
        print(f"DEBUG: –†–æ—Å–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {recognized_text}")

        log_message(user.id, username, update.message.message_id, "voice", "question", recognized_text)

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        from qa_engine import get_answer # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —ñ–º–ø–æ—Ä—Ç —Ç—É—Ç –¥–æ—Ä–µ—á–Ω–∏–π –∞–±–æ –∑—Ä–æ–±—ñ—Ç—å –π–æ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–º
        answer = get_answer(recognized_text)
        log_message(user.id, username, update.message.message_id, "voice", "answer", answer)
        await update.message.reply_text(answer, parse_mode=ParseMode.HTML)

    except FileNotFoundError:
        print("ERROR: ffmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∞ —î –≤ PATH.")
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: ffmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except subprocess.CalledProcessError as e:
        print(f"ERROR: ffmpeg failed: {e}")
        print(f"ERROR: ffmpeg stdout: {e.stdout}")
        print(f"ERROR: ffmpeg stderr: {e.stderr}")
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó).")
    except ImportError:
         print("ERROR: –ú–æ–¥—É–ª—å qa_engine –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
         await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –º—ñ–π –º–æ–¥—É–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É.")
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        for fpath in [input_ogg, output_wav]:
            if os.path.exists(fpath):
                try:
                    os.remove(fpath)
                    print(f"DEBUG: Removed temp file {fpath}")
                except OSError as e:
                    print(f"ERROR: Could not remove temp file {fpath}: {e}")


# --- Lifespan –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞ ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üîÅ Lifespan –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram App...")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å Application
    # –ù–µ –ø–µ—Ä–µ–¥–∞—î–º–æ webhook_url —Ç—É—Ç, –≤—Å—Ç–∞–Ω–æ–≤–∏–º–æ –π–æ–≥–æ –ø—ñ–∑–Ω—ñ—à–µ
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ application –≤ —Å—Ç–∞–Ω—ñ FastAPI –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞
    app.state.telegram_app = application

    # === –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ (—è–∫ —É –≤–∞—à–æ–º—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∫–æ–¥—ñ) ===
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex('^‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É$'), update_profile), # –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_surname)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            SPECIALTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_specialty)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False
    )
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex('^üìã –ü—Ä–æ—Ñ—ñ–ª—å$'), show_profile))
    application.add_handler(CommandHandler("profile", show_profile)) # –î–æ–¥–∞—Ç–∫–æ–≤–æ –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    # –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –º–∞—î –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º –¥–ª—è TEXT
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ (–≥–æ—Ç—É—î –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏)
    await application.initialize()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–æ–±—Ä–æ–±–∫–∞ –∞–ø–¥–µ–π—Ç—ñ–≤)
    await application.start()

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
    try:
        print(f"DEBUG: –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook –Ω–∞ URL: {WEBHOOK_URL}")
        await application.bot.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=Update.ALL_TYPES, # –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—Å—ñ —Ç–∏–ø–∏ –æ–Ω–æ–≤–ª–µ–Ω—å
            secret_token=WEBHOOK_SECRET_TOKEN # –î—É–∂–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏!
        )
        print("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook: {e}")
        # –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –∑—É–ø–∏–Ω–∏—Ç–∏ –∑–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –∞–±–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑?

    yield # FastAPI –ø–æ—á–∏–Ω–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Ç—É—Ç

    # --- –ö–æ—Ä–µ–∫—Ç–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ ---
    print("‚ùå Lifespan –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è: –∑—É–ø–∏–Ω—è—î–º–æ Telegram App...")
    # –ó—É–ø–∏–Ω—è—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    await application.stop()
    # –í–∏–¥–∞–ª—è—î–º–æ –≤–µ–±—Ö—É–∫ (—â–æ–± Telegram –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–≤ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π —Å–µ—Ä–≤–µ—Ä)
    try:
        print("DEBUG: –í–∏–¥–∞–ª—è—î–º–æ webhook...")
        if await application.bot.delete_webhook():
            print("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        else:
            print("WARN: Webhook –Ω–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –Ω–µ –±—É–ª–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ).")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: {e}")
    # –í–∏–≤—ñ–ª—å–Ω—è—î–º–æ —Ä–µ—Å—É—Ä—Å–∏
    await application.shutdown()
    print("üõë Telegram App –∑—É–ø–∏–Ω–µ–Ω–æ.")


# === FastAPI –î–æ–¥–∞—Ç–æ–∫ ===
fastapi_app = FastAPI(lifespan=lifespan)

# --- –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø—Ä–∏–π–æ–º—É –≤–µ–±—Ö—É–∫—ñ–≤ –≤—ñ–¥ Telegram ---
@fastapi_app.post(WEBHOOK_PATH) # –®–ª—è—Ö –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç–æ–∫–µ–Ω, —è–∫ –≤–∏–∑–Ω–∞—á–µ–Ω–æ –≤ WEBHOOK_PATH
async def telegram_webhook_endpoint(request: Request):
    # 0. –û—Ç—Ä–∏–º—É—î–º–æ application –∑—ñ —Å—Ç–∞–Ω—É FastAPI
    application = request.app.state.telegram_app

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –±–µ–∑–ø–µ–∫–∏)
    secret_received = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret_received != WEBHOOK_SECRET_TOKEN:
        print(f"WARN: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Secret Token –æ—Ç—Ä–∏–º–∞–Ω–æ: {secret_received}")
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Invalid secret token")

    # 2. –û—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É (JSON –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º)
    try:
        data = await request.json()
        print("DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≤—ñ–¥ Telegram:", data) # –û–±–µ—Ä–µ–∂–Ω–æ, –º–æ–∂–µ –±—É—Ç–∏ –±–∞–≥–∞—Ç–æ –¥–∞–Ω–∏—Ö
    except json.JSONDecodeError:
        print("ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥ Telegram")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid JSON data")

    # 3. –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç Update
    update = Update.de_json(data, application.bot)
    if not update:
         print("ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±'—î–∫—Ç Update –∑ –¥–∞–Ω–∏—Ö")
         # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 200, —â–æ–± Telegram –Ω–µ –Ω–∞–º–∞–≥–∞–≤—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç
         return Response(status_code=status.HTTP_200_OK)

    # 4. –û–±—Ä–æ–±–ª—è—î–º–æ Update —á–µ—Ä–µ–∑ PTB Application
    print(f"DEBUG: –û–±—Ä–æ–±–ª—è—î–º–æ update_id: {update.update_id}")
    try:
        await application.process_update(update)
        print(f"DEBUG: –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ update_id: {update.update_id}")
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ update_id {update.update_id}: {e}")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 200, —â–æ–± Telegram –Ω–µ –≤–≤–∞–∂–∞–≤ —Ü–µ –Ω–µ–≤–¥–∞–ª–æ—é –¥–æ—Å—Ç–∞–≤–∫–æ—é —ñ –Ω–µ —Å–ø–∞–º–∏–≤ –∑–∞–ø–∏—Ç–∞–º–∏
        # –ö—Ä–∞—â–µ –ª–æ–≥—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É —ñ —Ä–æ–∑–±–∏—Ä–∞—Ç–∏—Å—è, –Ω—ñ–∂ –∑–º—É—à—É–≤–∞—Ç–∏ Telegram –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏
        return Response(status_code=status.HTTP_200_OK)

    # 5. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å Telegram
    return Response(status_code=status.HTTP_200_OK)


# --- Root –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ---
@fastapi_app.get("/")
async def root():
    return {"message": "FastAPI server for Telegram Bot is running (Webhook Mode)"}

# === –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Uvicorn ===
if __name__ == "__main__":
    print("DEBUG: –ó–∞–ø—É—Å–∫ FastAPI —á–µ—Ä–µ–∑ Uvicorn (Webhook Mode)")
    # Render –∑–∞–∑–≤–∏—á–∞–π –Ω–∞–¥–∞—î –∑–º—ñ–Ω–Ω—É PORT, Uvicorn —ó—ó –ø—ñ–¥—Ö–æ–ø–∏—Ç—å.
    # –Ø–∫—â–æ –∑–∞–ø—É—Å–∫–∞—î—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ —ñ —Ö–æ—á–µ—Ç–µ —ñ–Ω—à–∏–π –ø–æ—Ä—Ç, –≤–∫–∞–∂—ñ—Ç—å –π–æ–≥–æ —Ç—É—Ç.
    # –ü–æ—Ä—Ç 10000 —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–∞ Render.
    port = int(os.environ.get("PORT", 10000))
    uvicorn.run(fastapi_app, host="0.0.0.0", port=port)