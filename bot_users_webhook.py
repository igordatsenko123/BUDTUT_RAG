import os
import json
import subprocess
# import pandas as pd # –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ, —è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ —Ü—å–æ–º—É —Ñ–∞–π–ª—ñ
from datetime import datetime, timezone  # –î–æ–¥–∞–Ω–æ timezone
import asyncio
from db import SessionLocal  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ db.py —Ç–∞ SessionLocal –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ
from sqlalchemy import select
from models import User  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ models.py —Ç–∞ User –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ
import re
from crud import insert_or_update_user  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ crud.py —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—é—Ç—å
import html
# –ü–æ—Ä—è–¥–æ–∫ —ñ–º–ø–æ—Ä—Ç—ñ–≤ –¥–ª—è pydub —Ç–∞ imageio_ffmpeg –º–æ–∂–µ –±—É—Ç–∏ –≤–∞–∂–ª–∏–≤–∏–º
import imageio_ffmpeg
from pydub import AudioSegment

# --- Telegram ---
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, BotCommand
from telegram.ext import (
    Application, MessageHandler, filters, ContextTypes,
    CommandHandler, ConversationHandler, ApplicationBuilder, ExtBot,
    CallbackQueryHandler
)
from telegram.constants import ParseMode

# --- OpenAI ---
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ config.py —ñ—Å–Ω—É—î —Ç–∞ –º—ñ—Å—Ç–∏—Ç—å —Ü—ñ –∑–º—ñ–Ω–Ω—ñ
try:
    from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY
except ImportError:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
        raise ValueError(
            "TELEGRAM_BOT_TOKEN —Ç–∞ OPENAI_API_KEY –º–∞—é—Ç—å –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∞–±–æ –≤ config.py, –∞–±–æ —è–∫ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

from openai import OpenAI

# --- FastAPI & Uvicorn ---
import uvicorn
from fastapi import FastAPI, Request, HTTPException, Response, status
from contextlib import asynccontextmanager

# === –ö–ª—ñ—î–Ω—Ç–∏ —Ç–∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–∫—É
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É TELEGRAM_BOT_TOKEN!")
if not OPENAI_API_KEY:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É OPENAI_API_KEY!")

WEBHOOK_URL_BASE = os.environ.get("WEBHOOK_URL_BASE")
if not WEBHOOK_URL_BASE:
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ngrok URL —Ç—É—Ç, –∞–ª–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —Ü–µ –º–∞—î –±—É—Ç–∏ –∑–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    # WEBHOOK_URL_BASE = "https://your-ngrok-or-railway-url.io" # –ü—Ä–∏–∫–ª–∞–¥
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ WEBHOOK_URL_BASE!")

WEBHOOK_PATH = f"/telegram/{TELEGRAM_BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_URL_BASE.rstrip('/')}{WEBHOOK_PATH}"

client = OpenAI(api_key=OPENAI_API_KEY)

LOG_FILE = "chat_history.csv"

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
NAME, SURNAME, PHONE, SPECIALTY, EXPERIENCE = range(5)

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üí™ –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫—É—Ä—Å",
                        web_app=WebAppInfo(url="https://igordatsenko123.github.io/TG_WEB_APP_AISAFETYCOACH/?v=8"))]
    ],
    resize_keyboard=True
)

print("DEBUG: –Ü–º–ø–æ—Ä—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ")
print(f"DEBUG: Webhook URL –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {WEBHOOK_URL}")


# === –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
def log_message(user_id, username, msg_id, msg_type, role, content):
    print(f"DEBUG: –õ–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {username} ({user_id}) - {role}: {content}")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_entry = {
        "user_id": user_id, "username": username, "datetime": timestamp,
        "message_id": msg_id, "message_type": msg_type, "role": role, "content": content
    }
    try:
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ —ñ —à–≤–∏–¥–∫–æ—Å—Ç—ñ, –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É –≤ CSV –±–µ–∑ pandas –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        file_exists = os.path.exists(LOG_FILE)
        with open(LOG_FILE, 'a', newline='', encoding='utf-8') as f:
            csv_writer = csv.DictWriter(f, fieldnames=new_entry.keys())
            if not file_exists:
                csv_writer.writeheader()
            csv_writer.writerow(new_entry)
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ –≤ CSV: {e}")


# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ===
async def is_registered(user_id: int) -> bool:
    async with SessionLocal() as session:
        # SQLAlchemy 2.0+ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ session.execute(select(...))
        # —ñ –ø–æ—Ç—ñ–º .scalar_one_or_none() –∞–±–æ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏.
        # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∞—à SessionLocal —Ç–∞ User –º–æ–¥–µ–ª—å –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ä–æ–±–æ—Ç–∏.
        # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –ë–î —á–∞—Å—Ç–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è:
        async with session.begin():  # –ü–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            result = await session.execute(select(User).where(User.tg_id == user_id))
            user = result.scalar_one_or_none()
    return user is not None


# === –û–±—Ä–æ–±–Ω–∏–∫–∏ –ö–æ–º–∞–Ω–¥ —Ç–∞ –°—Ç–∞–Ω—ñ–≤ –ê–Ω–∫–µ—Ç–∏ ===

async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–∏—à–∏ –Ω–∞–º —Ç—É—Ç:\nhttps://t.me/ai_safety_coach_support"
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è start –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ (–∑–∞ —Å—Ç–∞–Ω–æ–º ConversationHandler)
    # –¶–µ –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∏–π —Å–ø–æ—Å—ñ–±, –Ω—ñ–∂ context.user_data.get("profile_started") –¥–ª—è —Ü—ñ—î—ó –ª–æ–≥—ñ–∫–∏
    # –û–¥–Ω–∞–∫, ConversationHandler —Å–∞–º –∫–µ—Ä—É—î –≤—Ö–æ–¥–æ–º, —Ç–æ–º—É —Ü—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–π–≤–æ—é,
    # —è–∫—â–æ /start —î–¥–∏–Ω–∏–π —Å–ø–æ—Å—ñ–± –ø–æ—á–∞—Ç–∏ —Ü—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ä–æ–∑–º–æ–≤—É.

    if await is_registered(user_id):
        try:
            user_db_name = None
            async with SessionLocal() as session:
                async with session.begin():
                    result = await session.execute(select(User.first_name).where(User.tg_id == user_id))
                    user_db_name = result.scalar_one_or_none()

            if user_db_name:
                await update.message.reply_text(
                    f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, <b>{html.escape(user_db_name)}</b>!\n–ì–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:",
                    reply_markup=menu_keyboard,
                    parse_mode=ParseMode.HTML
                )
                return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞
            else:
                # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –∞–ª–µ —ñ–º'—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Ü–µ –¥–∏–≤–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –∞–Ω–∫–µ—Ç—É
                print(f"WARN: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –∞–ª–µ —ñ–º'—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î. –ü–æ—á–∏–Ω–∞—î–º–æ –∞–Ω–∫–µ—Ç—É.")
                await update.message.reply_text(
                    "–ü—Ä–∏–≤—ñ—Ç! –ó–¥–∞—î—Ç—å—Å—è, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–≤–æ—ó –¥–∞–Ω—ñ. –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å üòä",
                    reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML
                )
        except Exception as e:
            print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
            await update.message.reply_text(
                "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –î–∞–≤–∞–π—Ç–µ —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?"
            )
        # –£ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ —î –ø—Ä–æ–±–ª–µ–º–∞ –∑ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º, –∞–±–æ –≤—ñ–Ω –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        # —ñ –º–∏ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –∑–∞–ø–∏—Ç—É —ñ–º–µ–Ω—ñ.
        context.user_data["profile_started"] = True  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¢–£–¢
        print(f"DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ—á–∏–Ω–∞—î –∞–Ω–∫–µ—Ç—É. –°—Ç–∞–Ω NAME. profile_started=True")
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º º—è", parse_mode=ParseMode.HTML)
        return NAME
    else:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        print(f"DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ü–æ—á–∏–Ω–∞—î–º–æ –∞–Ω–∫–µ—Ç—É.")
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –±–µ–∑–ø–µ–∫–∏ –ø—Ä–∞—Ü—ñ ‚õëÔ∏è –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —ñ–∑ –±—É–¥—å-—è–∫–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º! –î–∞–≤–∞–π –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å üòä",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML
        )
        await asyncio.sleep(0.5)
        context.user_data["profile_started"] = True  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¢–£–¢
        print(f"DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ—á–∏–Ω–∞—î –∞–Ω–∫–µ—Ç—É. –°—Ç–∞–Ω NAME. profile_started=True")
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º º—è", parse_mode=ParseMode.HTML)
        return NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è get_name –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}. –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–º'—è: '{name}'")

    if name in ["üìã –ü—Ä–æ—Ñ—ñ–ª—å", "‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"] or len(name) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—î —ñ–º º—è.")
        return NAME

    context.user_data["name"] = name
    # context.user_data["profile_started"] = True # –¶–µ–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –≤–∂–µ –º–∞—î –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —É start()
    print(f"DEBUG: –Ü–º'—è '{name}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è user_id={user_id}. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É SURNAME.")
    await update.message.reply_text("–û–∫–µ–π! –ê —Ç–µ–ø–µ—Ä –ø—Ä—ñ–∑–≤–∏—â–µ", reply_markup=ReplyKeyboardRemove())
    return SURNAME


# ... (—Ä–µ—à—Ç–∞ –≤–∞—à–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π-–æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤: get_surname, get_phone, process_contact_info, etc.) ...
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–æ–Ω–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞–Ω–∏ –∞–±–æ ConversationHandler.END
# –Ü —â–æ –≤–æ–Ω–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å/–æ—á–∏—â—É—é—Ç—å context.user_data["profile_started"] —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö (–≤ –∫—ñ–Ω—Ü—ñ –∞–Ω–∫–µ—Ç–∏)

async def get_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    surname = update.message.text.strip()
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è get_surname –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}. –û—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä—ñ–∑–≤–∏—â–µ: '{surname}'")

    if surname in ["üìã –ü—Ä–æ—Ñ—ñ–ª—å", "‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"] or len(surname) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—î –ø—Ä—ñ–∑–≤–∏—â–µ.")
        return SURNAME

    context.user_data["surname"] = surname
    contact_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    user_name = context.user_data.get("name", "–¥—Ä—É–∂–µ")
    await update.message.reply_text(
        f"–†–∞–¥–∏–π –∑–Ω–∞–π–æ–º—Å—Ç–≤—É, <b>{html.escape(user_name)}</b>! –î–∞–≤–∞–π –¥–∞–ª—ñ üí™",
        parse_mode=ParseMode.HTML
    )
    await update.message.reply_text(
        "–ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –π–æ–≥–æ.\n\n"
        "<i>–¢–≤–æ—ó –¥–∞–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–≤–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –Ω–∞–¥–∞—Ç–∏ —Ç–æ–±—ñ —Å–∞–º–µ —Ç–µ, —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ</i>",
        reply_markup=contact_keyboard, parse_mode=ParseMode.HTML
    )
    print(f"DEBUG: –ü—Ä—ñ–∑–≤–∏—â–µ '{surname}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è user_id={user_id}. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É PHONE.")
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_phone = update.message.text.strip()
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è get_phone (—Ç–µ–∫—Å—Ç) –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}. –û—Ç—Ä–∏–º–∞–Ω–æ: {raw_phone}")
    digits_only = re.sub(r"\D", "", raw_phone)
    normalized = ""
    if digits_only.startswith("0") and len(digits_only) == 10:
        normalized = "+380" + digits_only[1:]
    elif digits_only.startswith("380") and len(digits_only) == 12:
        normalized = "+" + digits_only
    elif len(digits_only) == 9 and digits_only.startswith(
            ("39", "50", "63", "66", "67", "68", "73", "91", "92", "93", "94", "95", "96", "97", "98", "99")):
        normalized = "+380" + digits_only
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É.</b>\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ <code>+380XXXXXXXXX</code>, <code>0XXXXXXXXX</code>, –∞–±–æ <code>XXXXXXXXX</code> (9 —Ü–∏—Ñ—Ä, —è–∫—â–æ —Ü–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–º–µ—Ä).",
            parse_mode=ParseMode.HTML
        )
        return PHONE
    context.user_data["phone"] = normalized
    print(f"DEBUG: –¢–µ–ª–µ—Ñ–æ–Ω '{normalized}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è user_id={user_id}. –í–∏–∫–ª–∏–∫ ask_specialty.")
    await update.message.reply_text("–û–∫–µ–π, —Ä—É—Ö–∞—î–º–æ—Å—è –¥–∞–ª—ñ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    return await ask_specialty(update, context)


async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è process_contact_info –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}.")
    if contact.user_id != user_id:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –≤–ª–∞—Å–Ω–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.")
        return PHONE
    phone_number = contact.phone_number
    normalized_phone = phone_number if phone_number.startswith('+') else '+' + phone_number
    context.user_data["phone"] = normalized_phone
    print(f"DEBUG: –ö–æ–Ω—Ç–∞–∫—Ç '{normalized_phone}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è user_id={user_id}. –í–∏–∫–ª–∏–∫ ask_specialty.")
    await update.message.reply_text("–û–∫–µ–π, —Ä—É—Ö–∞—î–º–æ—Å—è –¥–∞–ª—ñ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    return await ask_specialty(update, context)


async def ask_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è ask_specialty –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}.")
    message_to_reply = update.callback_query.message if update.callback_query else update.message
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–≤–∞—Ä—é–≤–∞–ª—å–Ω–∏–∫", callback_data="spec:–ó–≤–∞—Ä—é–≤–∞–ª—å–Ω–∏–∫")],
        [InlineKeyboardButton("–ú—É–ª—è—Ä", callback_data="spec:–ú—É–ª—è—Ä")],
        [InlineKeyboardButton("–ú–æ–Ω–æ–ª—ñ—Ç–Ω–∏–∫", callback_data="spec:–ú–æ–Ω–æ–ª—ñ—Ç–Ω–∏–∫")],
        [InlineKeyboardButton("–ê—Ä–º–∞—Ç—É—Ä–Ω–∏–∫", callback_data="spec:–ê—Ä–º–∞—Ç—É—Ä–Ω–∏–∫")],
        [InlineKeyboardButton("–Ü–Ω—à–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å", callback_data="spec:other_spec")]
    ])
    await message_to_reply.reply_text("–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:", reply_markup=keyboard)
    print(f"DEBUG: –ó–∞–ø–∏—Ç —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –¥–ª—è user_id={user_id}. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É SPECIALTY.")
    return SPECIALTY


async def handle_specialty_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è handle_specialty_selection –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}. Data: {data}")

    if data.startswith("spec:"):
        specialty_choice = data.split(":", 1)[1]
        if specialty_choice == "other_spec":
            await query.edit_message_text("‚úèÔ∏è –î–æ–±—Ä–µ, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –≤—Ä—É—á–Ω—É:")
            print(
                f"DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–Ü–Ω—à–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å'. –ó–∞–ª–∏—à–∞—î–º–æ—Å—è –≤ —Å—Ç–∞–Ω—ñ SPECIALTY –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É.")
            return SPECIALTY  # –û—á—ñ–∫—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ —É —Ü—å–æ–º—É –∂ —Å—Ç–∞–Ω—ñ
        else:
            context.user_data["specialty"] = specialty_choice
            await query.edit_message_text(f"‚úÖ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: <b>{html.escape(specialty_choice)}</b>",
                                          parse_mode=ParseMode.HTML)
            print(f"DEBUG: –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å '{specialty_choice}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è user_id={user_id}. –í–∏–∫–ª–∏–∫ ask_experience.")
            return await ask_experience(update, context)
    return SPECIALTY


async def handle_manual_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty = update.message.text.strip()
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è handle_manual_specialty –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}. –û—Ç—Ä–∏–º–∞–Ω–æ: '{specialty}'")

    if not specialty or len(specialty) < 2 or any(c in specialty for c in "!@#$%^&*(){}[]<>"):
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å (–Ω–µ –º–µ–Ω—à–µ 2 –ª—ñ—Ç–µ—Ä, –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤).")
        return SPECIALTY
    if specialty in ["üìã –ü—Ä–æ—Ñ—ñ–ª—å", "‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"]:
        await update.message.reply_text("‚ö†Ô∏è –¶–µ –≤–∏–≥–ª—è–¥–∞—î —è–∫ –∫–Ω–æ–ø–∫–∞. –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –≤—Ä—É—á–Ω—É.")
        return SPECIALTY

    context.user_data["specialty"] = specialty
    await update.message.reply_text(f"‚úÖ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: <b>{html.escape(specialty)}</b>",
                                    parse_mode=ParseMode.HTML)
    print(
        f"DEBUG: –†—É—á–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å '{specialty}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è user_id={user_id}. –í–∏–∫–ª–∏–∫ ask_experience_from_message.")
    return await ask_experience_from_message(update, context)


async def ask_experience_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è ask_experience_from_message –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}.")
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("<1 —Ä–æ–∫—É", callback_data="exp:<1"),
         InlineKeyboardButton("1‚Äì2 —Ä–æ–∫–∏", callback_data="exp:1-2")],
        [InlineKeyboardButton("3‚Äì5 —Ä–æ–∫—ñ–≤", callback_data="exp:3-5"),
         InlineKeyboardButton(">5 —Ä–æ–∫—ñ–≤", callback_data="exp:>5")],
    ])
    user_name = context.user_data.get("name", "–¥—Ä—É–∂–µ")
    await update.message.reply_text(
        f"–ß—É–¥–æ–≤–æ, <b>{html.escape(user_name)}</b>! –©–µ —Ç—Ä–æ—à–∫–∏! ü§ó\n–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ —Ç–∏ –ø—Ä–∞—Ü—é—î—à –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é?",
        reply_markup=keyboard, parse_mode=ParseMode.HTML
    )
    print(f"DEBUG: –ó–∞–ø–∏—Ç –¥–æ—Å–≤—ñ–¥—É (–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) –¥–ª—è user_id={user_id}. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É EXPERIENCE.")
    return EXPERIENCE


async def ask_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è ask_experience (–∑ callback) –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}.")
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("<1 —Ä–æ–∫—É", callback_data="exp:<1"),
         InlineKeyboardButton("1‚Äì2 —Ä–æ–∫–∏", callback_data="exp:1-2")],
        [InlineKeyboardButton("3‚Äì5 —Ä–æ–∫—ñ–≤", callback_data="exp:3-5"),
         InlineKeyboardButton(">5 —Ä–æ–∫—ñ–≤", callback_data="exp:>5")],
    ])
    user_name = context.user_data.get("name", "–¥—Ä—É–∂–µ")
    message_to_reply = update.callback_query.message if update.callback_query else update.message
    await message_to_reply.reply_text(
        f"–ß—É–¥–æ–≤–æ, <b>{html.escape(user_name)}</b>! –©–µ —Ç—Ä–æ—à–∫–∏! ü§ó\n–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ —Ç–∏ –ø—Ä–∞—Ü—é—î—à –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é?",
        reply_markup=keyboard, parse_mode=ParseMode.HTML
    )
    print(f"DEBUG: –ó–∞–ø–∏—Ç –¥–æ—Å–≤—ñ–¥—É –¥–ª—è user_id={user_id}. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É EXPERIENCE.")
    return EXPERIENCE


async def handle_experience_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è handle_experience_selection –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}. Data: {data}")
    valid_experiences = ["<1", "1-2", "3-5", ">5"]

    if data.startswith("exp:"):
        experience = data.split(":")[1]
        if experience not in valid_experiences:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–æ—Å–≤—ñ–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É.")
            return EXPERIENCE

        context.user_data["experience"] = experience
        await query.edit_message_text(f"‚úÖ –î–æ—Å–≤—ñ–¥: <b>{html.escape(experience)}</b> —Ä–æ–∫—ñ–≤", parse_mode=ParseMode.HTML)

        tg_id = update.effective_user.id
        user_obj = update.effective_user
        try:
            print(f"DEBUG: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {tg_id} –≤ –ë–î. –î–∞–Ω—ñ: {context.user_data}")
            await insert_or_update_user(
                tg_id=tg_id,
                first_name=context.user_data.get("name"),
                last_name=context.user_data.get("surname"),
                phone=context.user_data.get("phone"),
                speciality=context.user_data.get("specialty"),
                experience=experience,
                company=None,  # –ü–æ–ª–µ COMPANY –≤–∏–¥–∞–ª–µ–Ω–æ
                username=user_obj.username,
                updated_at=datetime.now(timezone.utc)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ timezone.utc
            )
            await query.message.reply_text(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n\n"
                "–¢–µ–ø–µ—Ä –∑–∞–¥–∞–≤–∞–π –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ <b>–±–µ–∑–ø–µ–∫–∏ –ø—Ä–∞—Ü—ñ</b> –∞–±–æ –ø—Ä–æ—Ö–æ–¥—å –∫—É—Ä—Å "
                "<b>‚Äú–ù–∞–≤—á–∞–Ω–Ω—è –∑ –û—Ö–æ—Ä–æ–Ω–∏ –ü—Ä–∞—Ü—ñ‚Äù</b> ‚Äî –∫–Ω–æ–ø–∫–∞ –∑–Ω–∏–∑—É –µ–∫—Ä–∞–Ω–∞.\n\n"
                "–Ø –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤ º—è–∑–∫—É ‚Äî —á–µ–∫–∞—é –Ω–∞ —Ç–≤–æ—ó –ø–∏—Ç–∞–Ω–Ω—è <b>24/7</b>! \U0001FAE1",
                reply_markup=menu_keyboard, parse_mode=ParseMode.HTML
            )
            print(f"DEBUG: –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è tg_id={tg_id}. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É.")
        except Exception as e:
            print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–Ω–∫–µ—Ç—É –≤ –±–∞–∑—É –¥–ª—è {tg_id}: {e}")
            await query.message.reply_text("‚ö†Ô∏è –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–Ω–∫–µ—Ç–∏.")

        context.user_data.clear()  # –û—á–∏—â—É—î–º–æ "profile_started" —Ç–∞ —ñ–Ω—à—ñ –¥–∞–Ω—ñ
        return ConversationHandler.END
    return EXPERIENCE


async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è show_profile –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={tg_id}")
    if not await is_registered(tg_id):
        print(f"DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {tg_id} –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π (–¥–ª—è /profile). –ü—Ä–æ–ø–æ–Ω—É—î–º–æ /start.")
        await update.message.reply_text("–ó–¥–∞—î—Ç—å—Å—è, –≤–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END  # –ê–±–æ –ø—Ä–æ—Å—Ç–æ return, —è–∫—â–æ —Ü–µ –Ω–µ —á–∞—Å—Ç–∏–Ω–∞ –¥—ñ–∞–ª–æ–≥—É

    try:
        user_data_from_db = None
        async with SessionLocal() as session:
            async with session.begin():
                result = await session.execute(select(User).where(User.tg_id == tg_id))
                user_data_from_db = result.scalar_one_or_none()

        if user_data_from_db is None:
            await update.message.reply_text(
                "–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Ö–æ—á–∞ –≤–∏ –º–∞–ª–∏ –±—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ /start.")
            return ConversationHandler.END

        profile_text = (
            f"üë§ <b>–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:</b>\n"
            f"<b>–Ü–º'—è:</b> {html.escape(user_data_from_db.first_name or 'N/A')}\n"
            f"<b>–ü—Ä–∏–∑–≤—ñ—â–µ:</b> {html.escape(user_data_from_db.last_name or 'N/A')}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {html.escape(user_data_from_db.phone or 'N/A')}\n"
            f"<b>–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:</b> {html.escape(user_data_from_db.speciality or 'N/A')}\n"
            f"<b>–î–æ—Å–≤—ñ–¥:</b> {html.escape(user_data_from_db.experience or 'N/A')}\n"
        )
        await update.message.reply_text(text=profile_text, parse_mode=ParseMode.HTML, reply_markup=menu_keyboard)
        print(f"DEBUG: –ü—Ä–æ—Ñ—ñ–ª—å –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è user_id={tg_id}.")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è {tg_id}: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.")
    return ConversationHandler.END


async def update_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è update_profile –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}")
    if not await is_registered(user_id):
        print(f"DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π (–¥–ª—è update_profile). –ü—Ä–æ–ø–æ–Ω—É—î–º–æ /start.")
        await update.message.reply_text("–ó–¥–∞—î—Ç—å—Å—è, –≤–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END  # –í–∞–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏, —è–∫—â–æ —Ü–µ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É

    first_name = update.effective_user.first_name or "–¥—Ä—É–∂–µ"
    await update.message.reply_text(f"–ü—Ä–∏–≤—ñ—Ç, {html.escape(first_name)}! –î–∞–≤–∞–π –æ–Ω–æ–≤–∏–º–æ –∞–Ω–∫–µ—Ç—É.")
    await asyncio.sleep(0.5)
    context.user_data["profile_started"] = True  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    print(f"DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–Ω–æ–≤–ª—é—î –ø—Ä–æ—Ñ—ñ–ª—å. –°—Ç–∞–Ω NAME. profile_started=True")
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º º—è")
    return NAME


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –§—É–Ω–∫—Ü—ñ—è cancel –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è user_id={user_id}")
    context.user_data.clear()  # –û—á–∏—â—É—î–º–æ "profile_started" —Ç–∞ —ñ–Ω—à—ñ –¥–∞–Ω—ñ
    await update.message.reply_text("–ê–Ω–∫–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=menu_keyboard)
    print(f"DEBUG: –ê–Ω–∫–µ—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}. –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    return ConversationHandler.END


# --- –í–ò–ü–†–ê–í–õ–ï–ù–û: handle_message ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    user_id = update.effective_user.id
    print(
        f"üöÄ –ó–∞–≥–∞–ª—å–Ω–∏–π handle_message: '{text}' –≤—ñ–¥ user_id={user_id}. profile_started={context.user_data.get('profile_started')}")

    # –Ø–∫—â–æ ConversationHandler –∞–∫—Ç–∏–≤–Ω–∏–π (—Ç–æ–±—Ç–æ profile_started=True),
    # —Ü–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –Ω—ñ—á–æ–≥–æ —Ä–æ–±–∏—Ç–∏, ConversationHandler —Å–∞–º —Ä–æ–∑–±–µ—Ä–µ—Ç—å—Å—è.
    # –¶—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞, —â–æ–± handle_message –Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,
    # –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ ConversationHandler.
    if context.user_data.get("profile_started"):
        print("DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ (–∞–Ω–∫–µ—Ç—ñ) ‚Äî –∑–∞–≥–∞–ª—å–Ω–∏–π handle_message –ø—Ä–æ–ø—É—Å–∫–∞—î –æ–±—Ä–æ–±–∫—É.")
        return  # –î—É–∂–µ –≤–∞–∂–ª–∏–≤–æ: –Ω–µ –æ–±—Ä–æ–±–ª—è—Ç–∏, —è–∫—â–æ –∞–Ω–∫–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞

    # –Ø–∫—â–æ —Ä–æ–∑–º–æ–≤–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if text == "üìã –ü—Ä–æ—Ñ—ñ–ª—å":
        print(f"DEBUG: –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ—Ñ—ñ–ª—å' –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ user_id={user_id} (–ø–æ–∑–∞ –∞–Ω–∫–µ—Ç–æ—é).")
        return await show_profile(update, context)  # show_profile –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é

    if not await is_registered(user_id):
        print(f"DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π (–∑–∞–≥–∞–ª—å–Ω–∏–π handle_message). –ü—Ä–æ–ø–æ–Ω—É—î–º–æ /start.")
        await update.message.reply_text(
            "–ó–¥–∞—î—Ç—å—Å—è, –º–∏ —â–µ –Ω–µ –∑–Ω–∞–π–æ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± —è –º—ñ–≥ –≤–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —Ç–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —ñ –Ω–µ –≤ –∞–Ω–∫–µ—Ç—ñ - –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –ø–∏—Ç–∞–Ω–Ω—è
    user = update.effective_user
    username = user.username or user.first_name
    log_message(user.id, username, update.message.message_id, "text", "question", text)

    try:
        from qa_engine import get_answer
        answer = get_answer(text)
        print(f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞ –¥–ª—è {user_id}: {answer[:50]}...")
        await update.message.reply_text(text=answer, parse_mode=ParseMode.HTML, reply_markup=menu_keyboard)
    except ImportError:
        print("ERROR: –ú–æ–¥—É–ª—å qa_engine –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –º—ñ–π –º–æ–¥—É–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.", reply_markup=menu_keyboard)
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ qa_engine –¥–ª—è {user_id}: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.",
                                        reply_markup=menu_keyboard)


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(
        f"DEBUG: –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ user_id={user_id}. profile_started={context.user_data.get('profile_started')}")

    if context.user_data.get("profile_started"):
        print("DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ (–∞–Ω–∫–µ—Ç—ñ) ‚Äî handle_voice –ø—Ä–æ–ø—É—Å–∫–∞—î –æ–±—Ä–æ–±–∫—É.")
        return

    if not await is_registered(user_id):
        print(f"DEBUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ). –ü—Ä–æ–ø–æ–Ω—É—î–º–æ /start.")
        await update.message.reply_text(
            "–ó–¥–∞—î—Ç—å—Å—è, –º–∏ —â–µ –Ω–µ –∑–Ω–∞–π–æ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± —è –º—ñ–≥ –≤–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏.",
            reply_markup=ReplyKeyboardRemove())
        return
    # ... (—Ä–µ—à—Ç–∞ –ª–æ–≥—ñ–∫–∏ handle_voice —è–∫ —É –≤–∞—Å) ...
    voice = update.message.voice
    user = update.message.from_user
    username = user.username or user.first_name
    input_ogg = f"voice_{user_id}.ogg";
    output_wav = f"voice_{user_id}.wav"
    try:
        file = await context.bot.get_file(voice.file_id)
        await file.download_to_drive(input_ogg)
        AudioSegment.converter = imageio_ffmpeg.get_ffmpeg_exe()
        audio = AudioSegment.from_file(input_ogg, format="ogg")
        audio = audio.set_frame_rate(16000).set_channels(1).export(output_wav, format="wav")
        with open(output_wav, "rb") as f:
            response = client.audio.transcriptions.create(model="whisper-1", file=f)
        recognized_text = response.text
        log_message(user.id, username, update.message.message_id, "voice", "question", recognized_text)
        from qa_engine import get_answer
        answer = get_answer(recognized_text)
        await update.message.reply_text(text=answer, parse_mode=ParseMode.HTML, reply_markup=menu_keyboard)
    except FileNotFoundError:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: ffmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=menu_keyboard)
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–ª—è {user_id}: {e}"); await update.message.reply_text(
            "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.", reply_markup=menu_keyboard)
    finally:
        for fpath in [input_ogg, output_wav]:
            if os.path.exists(fpath):
                try:
                    os.remove(fpath)
                except OSError as e_os:
                    print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {fpath}: {e_os}")


async def set_bot_commands(application: Application):
    await application.bot.set_my_commands([
        BotCommand("start", "–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É / –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"),
        BotCommand("profile", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"),
        BotCommand("support", "–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"),
        BotCommand("cancel", "–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é (–∞–Ω–∫–µ—Ç—É)")
    ])


@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üîÅ Lifespan –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram App...")
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.state.telegram_app = application

    # ConversationHandler –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞–Ω–∏–π –ü–ï–†–®–ò–ú –∞–±–æ –∑ –Ω–∏–∂—á–∏–º –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–∏,
    # —â–æ–± –≤—ñ–Ω –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å–≤–æ—ó—Ö —Å—Ç–∞–Ω—ñ–≤ –¥–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤.
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("update_profile", update_profile),
            MessageHandler(filters.Regex('^‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É$'), update_profile),
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_surname)],
            PHONE: [
                MessageHandler(filters.CONTACT, process_contact_info),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)
            ],
            SPECIALTY: [
                CallbackQueryHandler(handle_specialty_selection, pattern="^spec:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_specialty)
            ],
            EXPERIENCE: [CallbackQueryHandler(handle_experience_selection, pattern="^exp:")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False,  # –í–∞–∂–ª–∏–≤–æ –¥–ª—è –∞–Ω–∫–µ—Ç
        # map_to_parent={ # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–π—Ç–∏ –∑ –¥—ñ–∞–ª–æ–≥—É —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —ñ–Ω—à–æ–º—É ConversationHandler (–Ω–µ –≤–∞—à –≤–∏–ø–∞–¥–æ–∫ –∑–∞—Ä–∞–∑)
        #     ConversationHandler.END: ConversationHandler.END
        # }
    )
    application.add_handler(conv_handler, group=0)  # –î–æ–¥–∞—î–º–æ –∑ –≥—Ä—É–ø–æ—é 0

    # –û–∫—Ä–µ–º—ñ –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ –º–∞—é—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑–∞–≤–∂–¥–∏
    application.add_handler(CommandHandler("support", support_command), group=1)
    application.add_handler(CommandHandler("profile", show_profile), group=1)

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ—ñ–ª—å" (—è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —á–∞—Å—Ç–∏–Ω–∞ –¥—ñ–∞–ª–æ–≥—É)
    application.add_handler(MessageHandler(filters.Regex('^üìã –ü—Ä–æ—Ñ—ñ–ª—å$'), show_profile), group=1)

    # –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å) - –º–∞—é—Ç—å –π—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ –∞–±–æ –∑ –≤–∏—â–æ—é –≥—Ä—É–ø–æ—é
    # –í–æ–Ω–∏ —Å–ø—Ä–∞—Ü—é—é—Ç—å, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ ConversationHandler –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –¥–ª—è –Ω—å–æ–≥–æ
    application.add_handler(MessageHandler(
        filters.VOICE & ~filters.UpdateType.EDITED_MESSAGE & ~filters.UpdateType.CHANNEL_POST,
        handle_voice
    ), group=1)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.UpdateType.EDITED_MESSAGE & ~filters.UpdateType.CHANNEL_POST,
        handle_message
    ), group=1)

    # CallbackQueryHandlers, —è–∫—ñ —î —á–∞—Å—Ç–∏–Ω–æ—é ConversationHandler, –≤–∂–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –Ω—å–æ–≥–æ.
    # –Ø–∫—â–æ —î –≥–ª–æ–±–∞–ª—å–Ω—ñ inline-–∫–Ω–æ–ø–∫–∏, —ó—Ö –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ–¥–∞—é—Ç—å—Å—è —Ç—É—Ç.
    # application.add_handler(CallbackQueryHandler(some_global_callback_handler))

    await application.initialize()
    await set_bot_commands(application)
    await application.start()
    try:
        print(f"DEBUG: –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook –Ω–∞ URL: {WEBHOOK_URL}")
        await application.bot.set_webhook(url=WEBHOOK_URL, allowed_updates=Update.ALL_TYPES)
        print("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook: {e}")
    yield
    print("‚ùå Lifespan –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è: –∑—É–ø–∏–Ω—è—î–º–æ Telegram App...")
    await application.stop()
    try:
        print("DEBUG: –í–∏–¥–∞–ª—è—î–º–æ webhook...")
        if await application.bot.delete_webhook():
            print("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        else:
            print("WARN: Webhook –Ω–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: {e}")
    await application.shutdown()


fastapi_app = FastAPI(lifespan=lifespan)


@fastapi_app.post(WEBHOOK_PATH)
async def telegram_webhook_endpoint(request: Request):
    application = request.app.state.telegram_app
    try:
        data = await request.json(); print("DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≤—ñ–¥ Telegram:", data)
    except json.JSONDecodeError:
        print("ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON"); raise HTTPException(status_code=400, detail="Invalid JSON")
    update = Update.de_json(data, application.bot)
    if not update: print("ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ Update"); return Response(status_code=200)
    print(f"DEBUG: –û–±—Ä–æ–±–ª—è—î–º–æ update_id: {update.update_id}")
    try:
        await application.process_update(update); print(f"DEBUG: –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ update_id: {update.update_id}")
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ update_id {update.update_id}: {e}"); return Response(status_code=200)
    return Response(status_code=200)


@fastapi_app.get("/")
async def root(): return {"message": "FastAPI server for Telegram Bot is running (Webhook Mode)"}


if __name__ == "__main__":
    print("DEBUG: –ó–∞–ø—É—Å–∫ FastAPI —á–µ—Ä–µ–∑ Uvicorn (Webhook Mode)")
    port = int(os.environ.get("PORT", 10000))
    uvicorn.run(fastapi_app, host="0.0.0.0", port=port)