import os
import json
import subprocess
import pandas as pd
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, MessageHandler, filters, ContextTypes,
    CommandHandler, ConversationHandler, ApplicationBuilder # –î–æ–¥–∞–Ω–æ ApplicationBuilder
)
from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY
from qa_engine import get_answer
from openai import OpenAI
import uvicorn
from fastapi import FastAPI
from contextlib import asynccontextmanager
import asyncio
# import threading # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Ü–µ–π —ñ–º–ø–æ—Ä—Ç

client = OpenAI(api_key=OPENAI_API_KEY)

# === –§–∞–π–ª—ã ===
USER_FILE = "user_info.json"
LOG_FILE = "chat_history.csv"

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ===
NAME, SURNAME, PHONE, SPECIALTY = range(4)

# === –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ===
menu_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("üìã –ü—Ä–æ—Ñ–∏–ª—å")], [KeyboardButton("‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É")]],
    resize_keyboard=True
)


print("DEBUG: –ò–º–ø–æ—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
# ... (–≤–∞—à –∫–æ–¥ –ª–æ–≥—É–≤–∞–Ω–Ω—è –±–µ–∑ –∑–º—ñ–Ω) ...
def log_message(user_id, username, msg_id, msg_type, role, content):
    print(f"DEBUG: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({user_id}) - {role}: {content}")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_entry = {
        "user_id": user_id,
        "username": username,
        "datetime": timestamp,
        "message_id": msg_id,
        "message_type": msg_type,
        "role": role,
        "content": content
    }
    try:
        if os.path.exists(LOG_FILE):
            df = pd.read_csv(LOG_FILE)
            df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)
        else:
            df = pd.DataFrame([new_entry])
        df.to_csv(LOG_FILE, index=False)
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
# ... (–≤–∞—à –∫–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –±–µ–∑ –∑–º—ñ–Ω) ...
def is_registered(user_id):
    print(f"DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é user_id={user_id}")
    if not os.path.exists(USER_FILE):
        return False
    with open(USER_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    return str(user_id) in data

# === –ê–Ω–∫–µ—Ç–∞ ===
# ... (–≤–∞—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∞–Ω–∫–µ—Ç–∏ start, get_name —ñ —Ç.–¥. –±–µ–∑ –∑–º—ñ–Ω) ...
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={user_id}")
    if is_registered(user_id):
        name = json.load(open(USER_FILE, encoding="utf-8"))[str(user_id)]["name"]
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {update.message.text}")
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–§–∞–º–∏–ª–∏—è?")
    return SURNAME

async def get_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è: {update.message.text}")
    context.user_data["surname"] = update.message.text
    await update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω?")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {update.message.text}")
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å?")
    return SPECIALTY

async def get_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã")
    context.user_data["specialty"] = update.message.text
    user_id = str(update.effective_user.id)

    user_info = {
        "name": context.user_data["name"],
        "surname": context.user_data["surname"],
        "phone": context.user_data["phone"],
        "specialty": context.user_data["specialty"]
    }

    if os.path.exists(USER_FILE):
        with open(USER_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {}

    data[user_id] = user_info
    with open(USER_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

    print(f"DEBUG: –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}")
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—â–µ–Ω–∏–µ üòä", reply_markup=menu_keyboard)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG: –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è")
    user_id = str(update.effective_user.id)
    if not is_registered(user_id):
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return
    with open(USER_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    user = data[user_id]
    profile_text = (
        f"üë§ *–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:*\n"
        f"–ò–º—è: {user['name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {user['surname']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
        f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {user['specialty']}"
    )
    await update.message.reply_text(profile_text, parse_mode="Markdown")

async def update_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
    await update.message.reply_text("–û–±–Ω–æ–≤–∏–º –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return NAME

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
# ... (–≤–∞—à –∫–æ–¥ handle_message —Ç–∞ handle_voice –±–µ–∑ –∑–º—ñ–Ω) ...
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üöÄ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:", update.message.text)  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = update.effective_user.id
    text = update.message.text

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –ø–æ–≤–∏–Ω–Ω–∞ –π—Ç–∏ –ü–ï–†–ï–î –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó,
    # —è–∫—â–æ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º
    # –ê–ª–µ —É –≤–∞—à—ñ–π –ª–æ–≥—ñ—Ü—ñ –∫–Ω–æ–ø–∫–∏ –∑'—è–≤–ª—è—é—Ç—å—Å—è –ø—ñ—Å–ª—è /start –¥–ª—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö,
    # –æ—Ç–∂–µ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –º–∞—î —Å–µ–Ω—Å.

    if text == "üìã –ü—Ä–æ—Ñ–∏–ª—å":
         # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¢–£–¢, –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º show_profile
        if not is_registered(user_id):
            await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
            return ConversationHandler.END # –∞–±–æ –ø—Ä–æ—Å—Ç–æ return, —è–∫—â–æ –ø–æ–∑–∞ –∫–æ–Ω–≤–µ—Ä—Å–µ–π—à–µ–Ω–æ–º
        return await show_profile(update, context) # –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–ª—ñ

    elif text == "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
         # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¢–£–¢
        if not is_registered(user_id):
            await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
            return ConversationHandler.END # –∞–±–æ –ø—Ä–æ—Å—Ç–æ return
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω NAME –¥–ª—è –ø–æ—á–∞—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
        await update.message.reply_text("–û–±–Ω–æ–≤–∏–º –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return NAME # –ú–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ç–∞–Ω –¥–ª—è ConversationHandler


    # –Ø–∫—â–æ —Ü–µ –Ω–µ –∫–Ω–æ–ø–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not is_registered(user_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start.")
        # –í–∞–∂–ª–∏–≤–æ: —è–∫—â–æ —Ü–µ–π —Ö–µ–Ω–¥–ª–µ—Ä –Ω–µ —î —á–∞—Å—Ç–∏–Ω–æ—é ConversationHandler,
        # —Ç–æ –ø—Ä–æ—Å—Ç–æ return –¥–æ—Å—Ç–∞—Ç–Ω—å–æ. –Ø–∫—â–æ —î, —Ç—Ä–µ–±–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω –∞–±–æ END
        return ConversationHandler.END # –ê–±–æ –ø—Ä–æ—Å—Ç–æ return

    user = update.effective_user
    log_message(user.id, user.username, update.message.message_id, "text", "question", text)

    answer = get_answer(text)
    print("üí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:", answer)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    log_message(user.id, user.username, update.message.message_id, "text", "answer", answer)
    await update.message.reply_text(answer)
    # –¢—É—Ç —Ç–µ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ç–∞–Ω, —è–∫—â–æ —Ü–µ–π —Ö–µ–Ω–¥–ª–µ—Ä —î —á–∞—Å—Ç–∏–Ω–æ—é ConversationHandler
    # –Ø–∫—â–æ –Ω—ñ - –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ç—Ä–µ–±–∞. –°—É–¥—è—á–∏ –∑ –∫–æ–¥—É, —Ü–µ–π —Ö–µ–Ω–¥–ª–µ—Ä –ù–ï –≤ ConversationHandler.


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print("DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    if not is_registered(user_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start.")
        return

    voice = update.message.voice
    file = await context.bot.get_file(voice.file_id)
    user = update.message.from_user

    input_ogg = f"voice_{user_id}.ogg" # –î–æ–¥–∞—î–º–æ user_id –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
    output_wav = f"voice_{user_id}.wav"
    await file.download_to_drive(input_ogg)

    print("DEBUG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ ffmpeg")
    try:
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤–∏–≤–æ–¥—É ffmpeg
        process = subprocess.run(
            ["ffmpeg", "-y", "-i", input_ogg, output_wav],
            capture_output=True, text=True, check=True
        )
        print("DEBUG: ffmpeg stdout:", process.stdout)
        print("DEBUG: ffmpeg stderr:", process.stderr)
    except subprocess.CalledProcessError as e:
        print(f"ERROR: ffmpeg failed: {e}")
        print(f"ERROR: ffmpeg stdout: {e.stdout}")
        print(f"ERROR: ffmpeg stderr: {e.stderr}")
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        # Clean up even if ffmpeg fails
        if os.path.exists(input_ogg):
             os.remove(input_ogg)
        if os.path.exists(output_wav):
             os.remove(output_wav)
        return
    except FileNotFoundError:
        print("ERROR: ffmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∞ —î –≤ PATH.")
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: ffmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
         # Clean up
        if os.path.exists(input_ogg):
             os.remove(input_ogg)
        return


    try:
        with open(output_wav, "rb") as f:
            print("DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Whisper API")
            response = client.audio.transcriptions.create(model="whisper-1", file=f)
        recognized_text = response.text
        print(f"DEBUG: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {recognized_text}")

        log_message(user.id, user.username, update.message.message_id, "voice", "question", recognized_text)

        answer = get_answer(recognized_text)

        log_message(user.id, user.username, update.message.message_id, "voice", "answer", answer)
        await update.message.reply_text(answer)

    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∞–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.")
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏
        if os.path.exists(input_ogg):
            os.remove(input_ogg)
        if os.path.exists(output_wav):
            os.remove(output_wav)


# --- –û–Ω–æ–≤–ª–µ–Ω–∏–π Lifespan ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üîÅ Lifespan –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram-–¥–æ–¥–∞—Ç–æ–∫
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ApplicationBuilder –¥–ª—è –∫—Ä–∞—â–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    telegram_app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∫–Ω–æ–ø–æ–∫ —è–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥—É, —è–∫—â–æ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å –ø–æ—á–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            MessageHandler(filters.Regex('^‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É$'), update_profile),
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_surname)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            SPECIALTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_specialty)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
         # –î–æ–∑–≤–æ–ª—è—î–º–æ —ñ–Ω—à–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –∫–æ–ª–∏ –¥—ñ–∞–ª–æ–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π
        per_message=False # –ê–±–æ True, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –±–∞–∂–∞–Ω–æ—ó –ª–æ–≥—ñ–∫–∏, –∞–ª–µ False —á–∞—Å—Ç—ñ—à–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å
    )

    telegram_app.add_handler(conv_handler)

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞ –∫–æ–º–∞–Ω–¥ –ü–û–ó–ê –¥—ñ–∞–ª–æ–≥–æ–º
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ—ñ–ª—å"
    telegram_app.add_handler(MessageHandler(filters.Regex('^üìã –ü—Ä–æ—Ñ–∏–ª—å$'), show_profile))
    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /profile (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
    telegram_app.add_handler(CommandHandler("profile", show_profile))
    # –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö
    telegram_app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–º–∞—î –±—É—Ç–∏ –û–°–¢–ê–ù–ù–Ü–ú —Ç–µ–∫—Å—Ç–æ–≤–∏–º)
    # –í–∞–∂–ª–∏–≤–æ: —Ü–µ–π —Ö–µ–Ω–¥–ª–µ—Ä —Å–ø—Ä–∞—Ü—é—î, —è–∫—â–æ —Ç–µ–∫—Å—Ç –Ω–µ —î –∫–æ–º–∞–Ω–¥–æ—é, –Ω–µ –ø—ñ–¥—ñ–π—à–æ–≤ –¥–æ Regex —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –≤–∏—â–µ,
    # —ñ ConversationHandler –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π –∞–±–æ –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–æ–ø—É—Å–∫ (fallbacks/per_message)
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ PTB (–≥–æ—Ç—É—î –≤—Å–µ –¥–æ –∑–∞–ø—É—Å–∫—É)
    await telegram_app.initialize()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∞–ø–¥–µ–π—Ç—ñ–≤ (polling) —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    # –¶–µ –ù–ï –±–ª–æ–∫—É—î FastAPI
    await telegram_app.start()
    await telegram_app.updater.start_polling() # –ù–µ –∑–∞–±—É–≤–∞—î–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∞–º–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–ø–¥–µ–π—Ç—ñ–≤

    print("‚úÖ Telegram Bot –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")

    yield # FastAPI/Uvicorn –ø—Ä–∞—Ü—é—é—Ç—å —Ç—É—Ç

    # –ö–æ—Ä–µ–∫—Ç–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏ FastAPI
    print("‚ùå Lifespan –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    await telegram_app.updater.stop() # –ó—É–ø–∏–Ω—è—î–º–æ polling
    await telegram_app.stop() # –ó—É–ø–∏–Ω—è—î–º–æ –æ–±—Ä–æ–±–∫—É –∞–ø–¥–µ–π—Ç—ñ–≤
    await telegram_app.shutdown() # –í–∏–≤—ñ–ª—å–Ω—è—î–º–æ —Ä–µ—Å—É—Ä—Å–∏
    print("üõë Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# === FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
# –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π lifespan
fastapi_app = FastAPI(lifespan=lifespan)

# –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ FastAPI
@fastapi_app.get("/")
async def root():
    return {"message": "FastAPI is running"}

if __name__ == "__main__":
    print("DEBUG: –ó–∞–ø—É—Å–∫ FastAPI —á–µ—Ä–µ–∑ Uvicorn")
    # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ uvicorn –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: pip install uvicorn[standard]
    uvicorn.run(fastapi_app, host="0.0.0.0", port=8000)