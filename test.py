import os
import json
import subprocess
import pandas as pd
from datetime import datetime
import asyncio
from db import SessionLocal
from sqlalchemy import select
from models import User
import re
from crud import insert_or_update_user
import html
from pydub import AudioSegment
import imageio_ffmpeg

# --- Telegram ---
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.constants import ParseMode
from telegram.ext import (
    Application, MessageHandler, filters, ContextTypes,
    CommandHandler, ConversationHandler, ApplicationBuilder, CallbackQueryHandler
)

# --- OpenAI ---
from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY
from openai import OpenAI

# --- FastAPI & Uvicorn ---
import uvicorn
from fastapi import FastAPI, Request, HTTPException, Response, status
from contextlib import asynccontextmanager

# === –ö–ª—ñ—î–Ω—Ç–∏ —Ç–∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É TELEGRAM_BOT_TOKEN!")
if not OPENAI_API_KEY:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É OPENAI_API_KEY!")

WEBHOOK_URL_BASE = os.environ.get("WEBHOOK_URL_BASE")
if not WEBHOOK_URL_BASE:
    raise ValueError("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ WEBHOOK_URL_BASE!")

WEBHOOK_PATH = f"/telegram/{TELEGRAM_BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_URL_BASE}{WEBHOOK_PATH}"

client = OpenAI(api_key=OPENAI_API_KEY)
LOG_FILE = "chat_history.csv"

NAME, SURNAME, PHONE, SPECIALTY, EXPERIENCE = range(5)

menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üí™ –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫—É—Ä—Å", web_app=WebAppInfo(url="https://igordatsenko123.github.io/TG_WEB_APP_AISAFETYCOACH/?v=8"))]
    ],
    resize_keyboard=True
)

print("DEBUG: –Ü–º–ø–æ—Ä—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ")
print(f"DEBUG: Webhook URL –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {WEBHOOK_URL}")

# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
def log_message(user_id, username, msg_id, msg_type, role, content):
    print(f"DEBUG: –õ–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {username} ({user_id}) - {role}: {content}")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_entry = {
        "user_id": user_id,
        "username": username,
        "datetime": timestamp,
        "message_id": msg_id,
        "message_type": msg_type,
        "role": role,
        "content": content
    }
    try:
        if os.path.exists(LOG_FILE):
            df = pd.read_csv(LOG_FILE)
            df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)
        else:
            df = pd.DataFrame([new_entry])
        df.to_csv(LOG_FILE, index=False)
    except Exception as e:
        print(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ: {e}")

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ===
async def is_registered(user_id: int) -> bool:
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar_one_or_none()
        return user is not None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={user_id}")

    # üõë –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É –∞–Ω–∫–µ—Ç–∏
    if context.user_data.get("profile_started"):
        print("DEBUG: –ê–Ω–∫–µ—Ç–∞ –≤–∂–µ –ø–æ—á–∞—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø—É—Å–∫.")
        return

    if await is_registered(user_id):
        try:
            async with SessionLocal() as session:
                result = await session.execute(select(User).where(User.tg_id == user_id))
                user = result.scalar_one_or_none()

                if user and user.first_name:
                    await update.message.reply_text(
                        f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, <b>{html.escape(user.first_name)}</b>!\n–ì–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:",
                        reply_markup=menu_keyboard,
                        parse_mode=ParseMode.HTML
                    )
                    return ConversationHandler.END
                else:
                    raise ValueError("–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑ –≤–∞—à–∏–º –ø—Ä–æ—Ñ—ñ–ª–µ–º. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–≤–Ω–∏–º–æ –∞–Ω–∫–µ—Ç—É –∑–Ω–æ–≤—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?"
            )
            context.user_data["profile_started"] = True
            return NAME
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –±–µ–∑–ø–µ–∫–∏ –ø—Ä–∞—Ü—ñ ‚õëÔ∏è –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —ñ–∑ –±—É–¥—å-—è–∫–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º! –î–∞–≤–∞–π –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å üòä",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML
        )
        await asyncio.sleep(1)
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º º—è", parse_mode=ParseMode.HTML)
        context.user_data["profile_started"] = True
        return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()

    if name in ["üìã –ü—Ä–æ—Ñ—ñ–ª—å", "‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"] or len(name) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—î —ñ–º º—è.")
        return NAME

    context.user_data["name"] = name
    await update.message.reply_text("–û–∫–µ–π! –ê —Ç–µ–ø–µ—Ä –ø—Ä—ñ–∑–≤–∏—â–µ", reply_markup=ReplyKeyboardRemove())
    return SURNAME

async def get_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    surname = update.message.text.strip()

    if surname in ["üìã –ü—Ä–æ—Ñ—ñ–ª—å", "‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"] or len(surname) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—î –ø—Ä—ñ–∑–≤–∏—â–µ.")
        return SURNAME

    context.user_data["surname"] = surname

    contact_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    user_name = context.user_data.get("name", "–¥—Ä—É–∂–µ")
    await update.message.reply_text(
        f"–†–∞–¥–∏–π –∑–Ω–∞–π–æ–º—Å—Ç–≤—É, <b>{html.escape(user_name)}</b>! –î–∞–≤–∞–π –¥–∞–ª—ñ üí™",
        parse_mode=ParseMode.HTML
    )

    await update.message.reply_text(
        "–ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –π–æ–≥–æ.\n\n"
        "<i>–¢–≤–æ—ó –¥–∞–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–≤–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –Ω–∞–¥–∞—Ç–∏ —Ç–æ–±—ñ —Å–∞–º–µ —Ç–µ, —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ</i>",
        reply_markup=contact_keyboard,
        parse_mode=ParseMode.HTML
    )
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_phone = update.message.text.strip()
    print(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω (—Ç–µ–∫—Å—Ç–æ–º): {raw_phone}")

    digits_only = re.sub(r"\D", "", raw_phone)

    if digits_only.startswith("0") and len(digits_only) == 10:
        normalized = "+380" + digits_only[1:]
    elif digits_only.startswith("380") and len(digits_only) == 12:
        normalized = "+" + digits_only
    elif digits_only.startswith(("67", "68", "50", "63")):
        normalized = "+380" + digits_only
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É.</b>\n"
            "–ü—Ä–∏–∫–ª–∞–¥ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É: <code>+380671234567</code>, <code>0671234567</code>, –∞–±–æ <code>67 123 45 67</code>",
            parse_mode=ParseMode.HTML
        )
        return PHONE

    context.user_data["phone"] = normalized
    print(f"DEBUG: –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä: {normalized}")
    await update.message.reply_text("–û–∫–µ–π, —Ä—É—Ö–∞—î–º–æ—Å—è –¥–∞–ª—ñ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    return await ask_specialty(update, context)

async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user_id = update.effective_user.id

    if contact.user_id != user_id:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –≤–ª–∞—Å–Ω–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.")
        return PHONE

    phone_number = contact.phone_number
    print(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É): {phone_number} –≤—ñ–¥ user_id={user_id}")

    digits_only = re.sub(r"\D", "", phone_number)
    if digits_only.startswith("380") and len(digits_only) == 12:
        normalized = "+" + digits_only
    elif len(digits_only) == 10 and digits_only.startswith("0"):
        normalized = "+380" + digits_only[1:]
    elif len(digits_only) == 9:
        normalized = "+380" + digits_only
    else:
        print("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏:", digits_only)
        await update.message.reply_text(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥–∏ –π–æ–≥–æ –≤—Ä—É—á–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: <code>+380XXXXXXXXX</code>",
            parse_mode=ParseMode.HTML
        )
        return PHONE

    context.user_data["phone"] = normalized
    await update.message.reply_text("–û–∫–µ–π, —Ä—É—Ö–∞—î–º–æ—Å—è –¥–∞–ª—ñ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    return await ask_specialty(update, context)

async def ask_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–≤–∞—Ä—é–≤–∞–ª—å–Ω–∏–∫", callback_data="spec:–ó–≤–∞—Ä—é–≤–∞–ª—å–Ω–∏–∫")],
        [InlineKeyboardButton("–ú—É–ª—è—Ä", callback_data="spec:–ú—É–ª—è—Ä")],
        [InlineKeyboardButton("–ú–æ–Ω–æ–ª—ñ—Ç–Ω–∏–∫", callback_data="spec:–ú–æ–Ω–æ–ª—ñ—Ç–Ω–∏–∫")],
        [InlineKeyboardButton("–ê—Ä–º–∞—Ç—É—Ä–Ω–∏–∫", callback_data="spec:–ê—Ä–º–∞—Ç—É—Ä–Ω–∏–∫")]
    ])

    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Å–≤–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å",
        reply_markup=keyboard
    )
    return SPECIALTY

async def handle_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    specialty = query.data.split("spec:")[1]
    context.user_data["speciality"] = specialty

    await query.edit_message_text(
        f"–û–±—Ä–∞–Ω–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: <b>{html.escape(specialty)}</b>\n\n–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É –º–∞—î—à —É —Ü—ñ–π —Å—Ñ–µ—Ä—ñ?",
        parse_mode=ParseMode.HTML
    )
    return EXPERIENCE


async def handle_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    experience = update.message.text.strip()

    if len(experience) < 1 or not re.match(r"^[\w\s.,-]{1,50}$", experience):
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É –º–∞—î—à (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2 —Ä–æ–∫–∏ –∞–±–æ –ø–æ–Ω–∞–¥ 10).")
        return EXPERIENCE

    context.user_data["experience"] = experience
    await update.message.reply_text("–î–æ–±—Ä–µ. –ê —Ç–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó, –¥–µ —Ç–∏ –ø—Ä–∞—Ü—é—î—à –∞–±–æ –æ—Å—Ç–∞–Ω–Ω—î –º—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏:")
    return COMPANY


async def handle_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    company = update.message.text.strip()

    if len(company) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–∞–≤–∂–Ω—é –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó.")
        return COMPANY

    context.user_data["company"] = company

    user_id = update.effective_user.id
    username = update.effective_user.username or ""
    now = datetime.utcnow()

    try:
        async with SessionLocal() as session:
            new_user = User(
                tg_id=user_id,
                first_name=context.user_data.get("name"),
                last_name=context.user_data.get("surname"),
                phone=context.user_data.get("phone"),
                speciality=context.user_data.get("speciality"),
                experience=context.user_data.get("experience"),
                company=context.user_data.get("company"),
                username=username,
                updated_at=now
            )
            session.add(new_user)
            await session.commit()

            await update.message.reply_text(
                "‚úÖ <b>–ê–Ω–∫–µ—Ç—É –∑–∞–ø–æ–≤–Ω–µ–Ω–æ!</b>\n–ú–æ–∂–µ—à —Å—Ç–∞–≤–∏—Ç–∏ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ç–µ—Ö–Ω—ñ–∫–∏ –±–µ–∑–ø–µ–∫–∏, –°–Ü–ó –∞–±–æ –Ω–æ—Ä–º –ø—Ä–∞—Ü—ñ ü¶∫",
                reply_markup=menu_keyboard,
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–Ω–∫–µ—Ç–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
        )

    return ConversationHandler.END
